[
["index.html", "SISG Module 17: Computational Pipeline for WGS Data 1 Introduction 1.1 Schedule 1.2 R packages used 1.3 Resources", " SISG Module 17: Computational Pipeline for WGS Data 2020-07-27 1 Introduction This site contains course materials for Course materials for SISG Module 17: Computational Pipeline for WGS Data, July 29-31, 2020. Data used is located in the github repository from which the site is built, as well as in the TOPMed analysis pipeline. Videos and slides for lectures are linked below in the schedule. Links to live sessions can be found at https://si.biostat.washington.edu/suminst/sisg2020/modules/SM2017 (make sure to log in). To work through the exercises, log into https://platform.sb.biodatacatalyst.nhlbi.nih.gov with your username and password. Join the Slack channel here: https://uwbiostatisticssisg.slack.com 1.1 Schedule NOTE: All times are Pacific Daylight Time (GMT-07:00) Wednesday, July 29 Zoom session 11:30-12:15 PDT - Introduction Pre-recorded lecture - Sequencing data formats (video) (slides) Pre-recorded lecture - Intro to Genomic Data Storage (video) (slides) Pre-recorded lecture - Using BioData Catalyst for SISG exercises (video) Exercises - GDS format in R Zoom session 13:00-13:45 PDT - Review of GDS Pre-recorded lecture - Phenotype harmonization (video) (slides) Exercises - Harmonization in R Thursday, July 30 Pre-recorded lecture - Association tests: Methods and motivation Pre-recorded lecture - GENESIS for association tests (video) (slides) Exercises - Association tests in R Zoom session 9:00-9:45 PDT - Association tests Pre-recorded lecture - Aggregate tests Exercises - Sliding window tests Zoom session 11:00-11:45 PDT - Aggregate tests Pre-recorded lecture - Population structure inference Pre-recorded lecture - Relatedness inference Pre-recorded lecture - R packages for PCA and relatedness (video) (slides) Exercises - Population structure and relatedness in R Zoom session 13:45-14:30 PDT - Population structure and relatedness Friday, July 31 Pre-recorded lecture - Mixed model association testing Exercises - Mixed models in R Zoom session 9:00-9:45 PDT - Mixed models Pre-recorded lecture - Variant annotation (video) (slides) Exercises - Using variant annotation Zoom session 11:00-11:45 PDT - Variant annotation Pre-recorded lecture - Analysis pipelines on the cloud (video) (slides) Pre-recorded lecture - Running a workflow on BioData Catalyst (video) Exercises - Running a GWAS workflow Zoom session 13:30-14:30 PDT - Working in the cloud Download the workshop data and exercises: https://github.com/UW-GAC/SISG_2020/archive/master.zip 1.2 R packages used SeqArray SeqVarTools GENESIS SNPRelate TopmedPipeline tidyverse GGally 1.3 Resources If you are new to R, you might find the following material helpful: Introduction to R materials from SISG Module 3 Graphics with ggplot2 tutorial Data manipulation with dplyr "],
["gds-format.html", "2 GDS format 2.1 Exploring a GDS file 2.2 Exercises", " 2 GDS format GDS is Genomic Data Structure, a storage format that can efficiently store genomic data and provide fast random access to subsets of the data. For more information on GDS for sequence data, read the SeqArray package vignette. 2.1 Exploring a GDS file To use the R packages developed at the University of Washington for sequence data, we first need to convert a VCF file to GDS. (If the file is BCF, use https://samtools.github.io/bcftools/bcftools.html to convert to VCF.) library(SeqArray) repo_path &lt;- &quot;https://github.com/UW-GAC/SISG_2020/raw/master&quot; if (!dir.exists(&quot;data&quot;)) dir.create(&quot;data&quot;) vcffile &lt;- &quot;data/1KG_phase3_subset_chr1.vcf.gz&quot; if (!file.exists(vcffile)) download.file(file.path(repo_path, vcffile), vcffile) gdsfile &lt;- &quot;data/1KG_phase3_subset_chr1.gds&quot; seqVCF2GDS(vcffile, gdsfile, fmt.import=&quot;GT&quot;, storage.option=&quot;LZMA_RA&quot;, verbose=FALSE) We can interact with the GDS file using the SeqArray package. gds &lt;- seqOpen(gdsfile) gds ## Object of class &quot;SeqVarGDSClass&quot; ## File: /Users/stephanie/SISG/SISG_2020/SISG_2020/data/1KG_phase3_subset_chr1.gds (70.6K) ## + [ ] * ## |--+ description [ ] * ## |--+ sample.id { Str8 1126 LZMA_ra(9.66%), 877B } * ## |--+ variant.id { Int32 1120 LZMA_ra(17.5%), 793B } * ## |--+ position { Int32 1120 LZMA_ra(78.5%), 3.4K } * ## |--+ chromosome { Str8 1120 LZMA_ra(4.55%), 109B } * ## |--+ allele { Str8 1120 LZMA_ra(26.0%), 1.2K } * ## |--+ genotype [ ] * ## | |--+ data { Bit2 2x1126x1121 LZMA_ra(8.34%), 51.4K } * ## | |--+ extra.index { Int32 3x0 LZMA_ra, 18B } * ## | \\--+ extra { Int16 0 LZMA_ra, 18B } ## |--+ phase [ ] ## | |--+ data { Bit1 1126x1120 LZMA_ra(0.11%), 177B } * ## | |--+ extra.index { Int32 3x0 LZMA_ra, 18B } * ## | \\--+ extra { Bit1 0 LZMA_ra, 18B } ## |--+ annotation [ ] ## | |--+ id { Str8 1120 LZMA_ra(40.4%), 3.6K } * ## | |--+ qual { Float32 1120 LZMA_ra(2.46%), 117B } * ## | |--+ filter { Int32,factor 1120 LZMA_ra(2.46%), 117B } * ## | |--+ info [ ] ## | \\--+ format [ ] ## \\--+ sample.annotation [ ] # the unique sample identifier comes from the VCF header sample.id &lt;- seqGetData(gds, &quot;sample.id&quot;) length(sample.id) ## [1] 1126 head(sample.id) ## [1] &quot;HG00096&quot; &quot;HG00097&quot; &quot;HG00099&quot; &quot;HG00100&quot; &quot;HG00101&quot; &quot;HG00102&quot; # a unique integer ID is assigned to each variant variant.id &lt;- seqGetData(gds, &quot;variant.id&quot;) length(variant.id) ## [1] 1120 head(variant.id) ## [1] 1 2 3 4 5 6 # reference allele frequency of each variant afreq &lt;- seqAlleleFreq(gds) hist(afreq, breaks=50) We can define a filter on the gds object. After using the seqSetFilter command, all subsequent reads from the gds object are restricted to the selected subset of data, until a new filter is defined or seqResetFilter is called. seqSetFilter(gds, variant.id=1:10, sample.id=sample.id[1:5]) ## # of selected samples: 5 ## # of selected variants: 10 Genotype data is stored in a 3-dimensional array, where the first dimension is always 2 for diploid genotypes. The second and third dimensions are samples and variants, respectively. The values of the array denote alleles: 0 is the reference allele and 1 is the alternate allele. For multiallelic variants, other alternate alleles are represented as integers &gt; 1. geno &lt;- seqGetData(gds, &quot;genotype&quot;) dim(geno) ## [1] 2 5 10 geno[,,1:2] ## , , 1 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 0 0 0 0 0 ## [2,] 0 0 0 0 0 ## ## , , 2 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 0 0 0 0 0 ## [2,] 0 0 0 0 0 The SeqVarTools package has some additional functions for interacting with SeqArray-format GDS files. library(SeqVarTools) # return genotypes in matrix format getGenotype(gds) ## variant ## sample 1 2 3 4 5 6 7 8 9 10 ## HG00096 &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; ## HG00097 &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; ## HG00099 &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; ## HG00100 &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; ## HG00101 &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; getGenotypeAlleles(gds) ## variant ## sample 1 2 3 4 5 6 7 8 9 10 ## HG00096 &quot;C|C&quot; &quot;C|C&quot; &quot;C|C&quot; &quot;C|C&quot; &quot;T|T&quot; &quot;G|G&quot; &quot;G|G&quot; &quot;A|A&quot; &quot;A|A&quot; &quot;C|C&quot; ## HG00097 &quot;C|C&quot; &quot;C|C&quot; &quot;C|C&quot; &quot;C|C&quot; &quot;T|T&quot; &quot;G|G&quot; &quot;G|G&quot; &quot;A|A&quot; &quot;A|A&quot; &quot;C|C&quot; ## HG00099 &quot;C|C&quot; &quot;C|C&quot; &quot;C|C&quot; &quot;C|C&quot; &quot;T|T&quot; &quot;G|G&quot; &quot;G|G&quot; &quot;A|A&quot; &quot;A|A&quot; &quot;C|C&quot; ## HG00100 &quot;C|C&quot; &quot;C|C&quot; &quot;C|C&quot; &quot;C|C&quot; &quot;T|T&quot; &quot;G|G&quot; &quot;G|G&quot; &quot;A|A&quot; &quot;A|A&quot; &quot;C|C&quot; ## HG00101 &quot;C|C&quot; &quot;C|C&quot; &quot;C|C&quot; &quot;C|C&quot; &quot;T|T&quot; &quot;G|G&quot; &quot;G|G&quot; &quot;A|A&quot; &quot;A|A&quot; &quot;C|C&quot; refDosage(gds) ## variant ## sample 1 2 3 4 5 6 7 8 9 10 ## HG00096 2 2 2 2 2 2 2 2 2 2 ## HG00097 2 2 2 2 2 2 2 2 2 2 ## HG00099 2 2 2 2 2 2 2 2 2 2 ## HG00100 2 2 2 2 2 2 2 2 2 2 ## HG00101 2 2 2 2 2 2 2 2 2 2 altDosage(gds) ## variant ## sample 1 2 3 4 5 6 7 8 9 10 ## HG00096 0 0 0 0 0 0 0 0 0 0 ## HG00097 0 0 0 0 0 0 0 0 0 0 ## HG00099 0 0 0 0 0 0 0 0 0 0 ## HG00100 0 0 0 0 0 0 0 0 0 0 ## HG00101 0 0 0 0 0 0 0 0 0 0 # look at reference and alternate alleles refChar(gds) ## [1] &quot;C&quot; &quot;C&quot; &quot;C&quot; &quot;C&quot; &quot;T&quot; &quot;G&quot; &quot;G&quot; &quot;A&quot; &quot;A&quot; &quot;C&quot; altChar(gds) ## [1] &quot;G&quot; &quot;T&quot; &quot;T&quot; &quot;T&quot; &quot;C&quot; &quot;A&quot; &quot;A&quot; &quot;T&quot; &quot;C&quot; &quot;T&quot; # data.frame of variant information variantInfo(gds) ## variant.id chr pos ref alt ## 1 1 1 970546 C G ## 2 2 1 985900 C T ## 3 3 1 1025045 C T ## 4 4 1 1265550 C T ## 5 5 1 1472676 T C ## 6 6 1 1735725 G A ## 7 7 1 2185887 G A ## 8 8 1 2283689 A T ## 9 9 1 2629401 A C ## 10 10 1 2710895 C T # reset the filter to all variants and samples seqResetFilter(gds) ## # of selected samples: 1,126 ## # of selected variants: 1,120 # how many alleles for each variant? n &lt;- seqNumAllele(gds) table(n) ## n ## 2 3 4 ## 1099 20 1 # some variants have more than one alternate allele multi.allelic &lt;- which(n &gt; 2) altChar(gds)[multi.allelic] ## [1] &quot;GT,G&quot; &quot;G,T&quot; &quot;A,T&quot; &quot;A,T&quot; ## [5] &quot;ATG,ATGTG&quot; &quot;C,G&quot; &quot;A,T&quot; &quot;C,T&quot; ## [9] &quot;A,C&quot; &quot;TAA,T&quot; &quot;GTTA,GTTT&quot; &quot;GCC,GCCC,G&quot; ## [13] &quot;A,C&quot; &quot;A,C&quot; &quot;A,C&quot; &quot;CAAGCAT,CGAGCAT&quot; ## [17] &quot;CATTATT,C&quot; &quot;AT,C&quot; &quot;TGTGA,C&quot; &quot;CCATT,CCATTCATT&quot; ## [21] &quot;C,G&quot; # extract a particular alternate allele # first alternate altChar(gds, n=1)[multi.allelic] ## [1] &quot;GT&quot; &quot;G&quot; &quot;A&quot; &quot;A&quot; &quot;ATG&quot; &quot;C&quot; &quot;A&quot; ## [8] &quot;C&quot; &quot;A&quot; &quot;TAA&quot; &quot;GTTA&quot; &quot;GCC&quot; &quot;A&quot; &quot;A&quot; ## [15] &quot;A&quot; &quot;CAAGCAT&quot; &quot;CATTATT&quot; &quot;AT&quot; &quot;TGTGA&quot; &quot;CCATT&quot; &quot;C&quot; # second alternate altChar(gds, n=2)[multi.allelic] ## [1] &quot;G&quot; &quot;T&quot; &quot;T&quot; &quot;T&quot; &quot;ATGTG&quot; &quot;G&quot; ## [7] &quot;T&quot; &quot;T&quot; &quot;C&quot; &quot;T&quot; &quot;GTTT&quot; &quot;GCCC&quot; ## [13] &quot;C&quot; &quot;C&quot; &quot;C&quot; &quot;CGAGCAT&quot; &quot;C&quot; &quot;C&quot; ## [19] &quot;C&quot; &quot;CCATTCATT&quot; &quot;G&quot; # how many variants are SNVs vs INDELs? table(isSNV(gds, biallelic=TRUE)) ## ## FALSE TRUE ## 110 1010 table(isSNV(gds, biallelic=FALSE)) ## ## FALSE TRUE ## 99 1021 # 11 SNVs are multi-allelic We can also return variant information as a GRanges object from the GenomicRanges package. This format for representing sequence data is common across many Bioconductor packages. Chromosome is stored in the seqnames column. The ranges column has variant position, which can be a single base pair or a range. gr &lt;- granges(gds) gr ## GRanges object with 1120 ranges and 0 metadata columns: ## seqnames ranges strand ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; ## 1 1 970546 * ## 2 1 985900 * ## 3 1 1025045 * ## 4 1 1265550 * ## 5 1 1472676 * ## ... ... ... ... ## 1116 1 248715186 * ## 1117 1 248715606-248715610 * ## 1118 1 248761613 * ## 1119 1 248894546 * ## 1120 1 249149558 * ## ------- ## seqinfo: 1 sequence from an unspecified genome; no seqlengths 2.2 Exercises Set a filter selecting only multi-allelic variants. Inspect their genotypes using the different methods you learned above. Use the alleleDosage method to find dosage for the second (and third, etc.) alternate allele. Use the hwe function in SeqVarTools to run a Hardy-Weinberg Equilibrium test on each variant. Identify a variant with low p-value and inspect its genotypes. (Note that the HWE test is only valid for biallelic variants, and will return NA for multiallelic variants.) "],
["gds-solutions.html", "3 GDS - Solutions", " 3 GDS - Solutions Set a filter selecting only multi-allelic variants. Inspect their genotypes using the different methods you learned above. Use the alleleDosage method to find dosage for the second (and third, etc.) alternate allele. seqSetFilter(gds, variant.sel=multi.allelic) ## # of selected variants: 21 geno &lt;- seqGetData(gds, &quot;genotype&quot;) dim(geno) ## [1] 2 1126 21 geno[,1:5,] ## , , 1 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 1 1 0 1 1 ## [2,] 0 1 1 1 1 ## ## , , 2 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 0 0 0 0 0 ## [2,] 0 0 0 0 0 ## ## , , 3 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 0 0 0 0 0 ## [2,] 0 0 0 0 0 ## ## , , 4 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 1 0 0 1 0 ## [2,] 0 0 0 0 1 ## ## , , 5 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 0 0 0 0 0 ## [2,] 0 0 0 0 0 ## ## , , 6 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 0 0 0 0 0 ## [2,] 0 0 0 0 0 ## ## , , 7 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 0 0 0 0 0 ## [2,] 0 0 0 0 0 ## ## , , 8 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 0 0 0 0 0 ## [2,] 0 0 0 0 0 ## ## , , 9 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 0 0 0 0 2 ## [2,] 0 0 0 0 0 ## ## , , 10 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 1 2 0 0 1 ## [2,] 0 2 0 2 1 ## ## , , 11 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 0 0 1 0 0 ## [2,] 1 1 0 1 0 ## ## , , 12 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 3 1 1 1 3 ## [2,] 3 3 3 1 0 ## ## , , 13 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 0 0 0 2 0 ## [2,] 0 0 0 0 0 ## ## , , 14 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 0 0 0 0 0 ## [2,] 0 0 0 0 0 ## ## , , 15 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 2 0 0 0 2 ## [2,] 0 0 0 2 0 ## ## , , 16 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 2 2 2 2 2 ## [2,] 2 2 2 2 2 ## ## , , 17 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 2 2 2 2 2 ## [2,] 2 2 2 2 2 ## ## , , 18 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 0 0 0 0 0 ## [2,] 0 0 0 0 0 ## ## , , 19 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 0 0 0 0 0 ## [2,] 0 0 0 0 0 ## ## , , 20 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 0 0 0 0 1 ## [2,] 0 0 0 0 0 ## ## , , 21 ## ## sample ## allele [,1] [,2] [,3] [,4] [,5] ## [1,] 0 0 0 0 0 ## [2,] 0 0 0 2 0 geno &lt;- getGenotype(gds) dim(geno) ## [1] 1126 21 head(geno) ## variant ## sample 30 69 73 161 162 195 243 253 407 431 434 ## HG00096 &quot;1|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;1|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;1|0&quot; &quot;0|1&quot; ## HG00097 &quot;1|1&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;2|2&quot; &quot;0|1&quot; ## HG00099 &quot;0|1&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;1|0&quot; ## HG00100 &quot;1|1&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;1|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|2&quot; &quot;0|1&quot; ## HG00101 &quot;1|1&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|1&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;2|0&quot; &quot;1|1&quot; &quot;0|0&quot; ## HG00102 &quot;0|1&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;1|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;2|2&quot; &quot;0|1&quot; ## variant ## sample 610 627 645 689 756 765 814 988 1014 1056 ## HG00096 &quot;3|3&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;2|0&quot; &quot;2|2&quot; &quot;2|2&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; ## HG00097 &quot;1|3&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;2|2&quot; &quot;2|2&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; ## HG00099 &quot;1|3&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;2|2&quot; &quot;2|2&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; ## HG00100 &quot;1|1&quot; &quot;2|0&quot; &quot;0|0&quot; &quot;0|2&quot; &quot;2|2&quot; &quot;2|2&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|2&quot; ## HG00101 &quot;3|0&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;2|0&quot; &quot;2|2&quot; &quot;2|2&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;1|0&quot; &quot;0|0&quot; ## HG00102 &quot;3|3&quot; &quot;0|2&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;2|2&quot; &quot;1|2&quot; &quot;0|0&quot; &quot;0|0&quot; &quot;0|1&quot; &quot;0|2&quot; geno &lt;- getGenotypeAlleles(gds) head(geno) ## variant ## sample 30 69 73 161 162 195 243 253 407 431 ## HG00096 &quot;GT|GTT&quot; &quot;A|A&quot; &quot;G|G&quot; &quot;A|G&quot; &quot;A|A&quot; &quot;A|A&quot; &quot;C|C&quot; &quot;G|G&quot; &quot;T|T&quot; &quot;TAA|TA&quot; ## HG00097 &quot;GT|GT&quot; &quot;A|A&quot; &quot;G|G&quot; &quot;G|G&quot; &quot;A|A&quot; &quot;A|A&quot; &quot;C|C&quot; &quot;G|G&quot; &quot;T|T&quot; &quot;T|T&quot; ## HG00099 &quot;GTT|GT&quot; &quot;A|A&quot; &quot;G|G&quot; &quot;G|G&quot; &quot;A|A&quot; &quot;A|A&quot; &quot;C|C&quot; &quot;G|G&quot; &quot;T|T&quot; &quot;TA|TA&quot; ## HG00100 &quot;GT|GT&quot; &quot;A|A&quot; &quot;G|G&quot; &quot;A|G&quot; &quot;A|A&quot; &quot;A|A&quot; &quot;C|C&quot; &quot;G|G&quot; &quot;T|T&quot; &quot;TA|T&quot; ## HG00101 &quot;GT|GT&quot; &quot;A|A&quot; &quot;G|G&quot; &quot;G|A&quot; &quot;A|A&quot; &quot;A|A&quot; &quot;C|C&quot; &quot;G|G&quot; &quot;C|T&quot; &quot;TAA|TAA&quot; ## HG00102 &quot;GTT|GT&quot; &quot;A|A&quot; &quot;G|G&quot; &quot;A|G&quot; &quot;A|A&quot; &quot;A|A&quot; &quot;C|C&quot; &quot;G|G&quot; &quot;T|T&quot; &quot;T|T&quot; ## variant ## sample 434 610 627 645 689 756 765 ## HG00096 &quot;G|GTTA&quot; &quot;G|G&quot; &quot;G|G&quot; &quot;G|G&quot; &quot;C|G&quot; &quot;CGAGCAT|CGAGCAT&quot; &quot;C|C&quot; ## HG00097 &quot;G|GTTA&quot; &quot;GCC|G&quot; &quot;G|G&quot; &quot;G|G&quot; &quot;G|G&quot; &quot;CGAGCAT|CGAGCAT&quot; &quot;C|C&quot; ## HG00099 &quot;GTTA|G&quot; &quot;GCC|G&quot; &quot;G|G&quot; &quot;G|G&quot; &quot;G|G&quot; &quot;CGAGCAT|CGAGCAT&quot; &quot;C|C&quot; ## HG00100 &quot;G|GTTA&quot; &quot;GCC|GCC&quot; &quot;C|G&quot; &quot;G|G&quot; &quot;G|C&quot; &quot;CGAGCAT|CGAGCAT&quot; &quot;C|C&quot; ## HG00101 &quot;G|G&quot; &quot;G|GC&quot; &quot;G|G&quot; &quot;G|G&quot; &quot;C|G&quot; &quot;CGAGCAT|CGAGCAT&quot; &quot;C|C&quot; ## HG00102 &quot;G|GTTA&quot; &quot;G|G&quot; &quot;G|C&quot; &quot;G|G&quot; &quot;G|G&quot; &quot;CGAGCAT|CGAGCAT&quot; &quot;CATTATT|C&quot; ## variant ## sample 814 988 1014 1056 ## HG00096 &quot;CT|CT&quot; &quot;CGTGA|CGTGA&quot; &quot;C|C&quot; &quot;A|A&quot; ## HG00097 &quot;CT|CT&quot; &quot;CGTGA|CGTGA&quot; &quot;C|C&quot; &quot;A|A&quot; ## HG00099 &quot;CT|CT&quot; &quot;CGTGA|CGTGA&quot; &quot;C|C&quot; &quot;A|A&quot; ## HG00100 &quot;CT|CT&quot; &quot;CGTGA|CGTGA&quot; &quot;C|C&quot; &quot;A|G&quot; ## HG00101 &quot;CT|CT&quot; &quot;CGTGA|CGTGA&quot; &quot;CCATT|C&quot; &quot;A|A&quot; ## HG00102 &quot;CT|CT&quot; &quot;CGTGA|CGTGA&quot; &quot;C|CCATT&quot; &quot;A|G&quot; dos &lt;- refDosage(gds) head(dos) ## variant ## sample 30 69 73 161 162 195 243 253 407 431 434 610 627 645 689 756 765 814 ## HG00096 1 2 2 1 2 2 2 2 2 1 1 0 2 2 1 0 0 2 ## HG00097 0 2 2 2 2 2 2 2 2 0 1 0 2 2 2 0 0 2 ## HG00099 1 2 2 2 2 2 2 2 2 2 1 0 2 2 2 0 0 2 ## HG00100 0 2 2 1 2 2 2 2 2 1 1 0 1 2 1 0 0 2 ## HG00101 0 2 2 1 2 2 2 2 1 0 2 1 2 2 1 0 0 2 ## HG00102 1 2 2 1 2 2 2 2 2 0 1 0 1 2 2 0 0 2 ## variant ## sample 988 1014 1056 ## HG00096 2 2 2 ## HG00097 2 2 2 ## HG00099 2 2 2 ## HG00100 2 2 1 ## HG00101 2 1 2 ## HG00102 2 1 1 dos &lt;- altDosage(gds) head(dos) ## variant ## sample 30 69 73 161 162 195 243 253 407 431 434 610 627 645 689 756 765 814 ## HG00096 1 0 0 1 0 0 0 0 0 1 1 2 0 0 1 2 2 0 ## HG00097 2 0 0 0 0 0 0 0 0 2 1 2 0 0 0 2 2 0 ## HG00099 1 0 0 0 0 0 0 0 0 0 1 2 0 0 0 2 2 0 ## HG00100 2 0 0 1 0 0 0 0 0 1 1 2 1 0 1 2 2 0 ## HG00101 2 0 0 1 0 0 0 0 1 2 0 1 0 0 1 2 2 0 ## HG00102 1 0 0 1 0 0 0 0 0 2 1 2 1 0 0 2 2 0 ## variant ## sample 988 1014 1056 ## HG00096 0 0 0 ## HG00097 0 0 0 ## HG00099 0 0 0 ## HG00100 0 0 1 ## HG00101 0 1 0 ## HG00102 0 1 1 dos &lt;- alleleDosage(gds, n=2) head(dos) ## variant ## sample 30 69 73 161 162 195 243 253 407 431 434 610 627 645 689 756 765 814 ## HG00096 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 2 0 ## HG00097 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 2 2 0 ## HG00099 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 0 ## HG00100 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 2 2 0 ## HG00101 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 2 2 0 ## HG00102 0 0 0 0 0 0 0 0 0 2 0 0 1 0 0 2 1 0 ## variant ## sample 988 1014 1056 ## HG00096 0 0 0 ## HG00097 0 0 0 ## HG00099 0 0 0 ## HG00100 0 0 1 ## HG00101 0 0 0 ## HG00102 0 0 1 dos &lt;- alleleDosage(gds, n=3) head(dos) ## variant ## sample 30 69 73 161 162 195 243 253 407 431 434 610 627 645 689 756 765 814 ## HG00096 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 ## HG00097 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 ## HG00099 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 ## HG00100 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## HG00101 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 ## HG00102 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 ## variant ## sample 988 1014 1056 ## HG00096 0 0 0 ## HG00097 0 0 0 ## HG00099 0 0 0 ## HG00100 0 0 0 ## HG00101 0 0 0 ## HG00102 0 0 0 Use the hwe function in SeqVarTools to run a Hardy-Weinberg Equilibrium test on each variant. Identify a variant with low p-value and inspect its genotypes. (Note that the HWE test is only valid for biallelic variants, and will return NA for multiallelic variants.) seqResetFilter(gds) ## # of selected samples: 1,126 ## # of selected variants: 1,120 hwe.res &lt;- hwe(gds) lowp &lt;- !is.na(hwe.res$p) &amp; hwe.res$p &lt; 1e-4 head(hwe.res[lowp,]) ## variant.id nAA nAa naa afreq p f ## 75 75 702 336 88 0.7726465 1.070663e-06 0.1506466 ## 92 92 632 381 113 0.7304618 3.558878e-06 0.1407120 ## 98 98 672 335 119 0.7455595 2.369695e-12 0.2158342 ## 105 105 93 272 761 0.2033748 7.851777e-16 0.2544970 ## 114 114 299 482 345 0.4795737 1.745346e-06 0.1424409 ## 150 150 471 447 208 0.6167851 8.020208e-08 0.1602251 seqSetFilter(gds, variant.id=75) ## # of selected variants: 1 table(getGenotype(gds)) ## ## 0|0 0|1 1|0 1|1 ## 702 165 171 88 table(refDosage(gds)) ## ## 0 1 2 ## 88 336 702 seqClose(gds) "],
["phenotype-harmonization.html", "4 Phenotype Harmonization 4.1 Inspect individual study data in R 4.2 Compare study values 4.3 Using null models to compare studies 4.4 Final considerations", " 4 Phenotype Harmonization To increase your sample set, you may need to combine phenotype data from different studies in order to run a cross-study analysis. The studies involved may have collected data in different ways, used different protocols or measurement units, or used different cutpoints to determine case status. The process of manipulating the phenotype data from different studies so that they can be analyzed together is called “phenotype harmonization”. In this exercise, we assume that you have created a phenotype harmonization plan for height, sent it to members from three studies to perform the harmonization, and received a harmonized phenotype file from each study. We will generate some diagnostic information about the harmonized phenotype. The exercise uses 1000 Genomes data, with simulated phenotypes for study, age, and height. The example phenotype files shown here are very simplified compared to how actual studies store and organize their their data. In this exercise, we will be using dplyr for a lot of the data manipulation, so load it now. library(dplyr) 4.1 Inspect individual study data in R The first step is to read the files into R for processing. repo_path &lt;- &quot;https://github.com/UW-GAC/SISG_2020/raw/master&quot; if (!dir.exists(&quot;data&quot;)) dir.create(&quot;data&quot;) pheno_files &lt;- c(&quot;data/pheno_data_study_1.txt&quot;, &quot;data/pheno_data_study_2.txt&quot;, &quot;data/pheno_data_study_3.txt&quot;) for (pheno_file in pheno_files) { if (!file.exists(pheno_file)) download.file(file.path(repo_path, pheno_file), pheno_file) } Next, read the study phenotype files into R. In this case, each file is tab-delimited. study_1 &lt;- read.table(&quot;data/pheno_data_study_1.txt&quot;, header = TRUE, sep = &quot;\\t&quot;, as.is = TRUE) head(study_1) ## subject_id sex age height ## 1 HG00096 M 47 165.3 ## 2 HG00102 F 49 169.1 ## 3 HG00112 M 46 167.9 ## 4 HG00114 M 49 169.5 ## 5 HG00115 M 35 161.1 ## 6 HG00116 M 37 182.2 study_2 &lt;- read.table(&quot;data/pheno_data_study_2.txt&quot;, header = TRUE, sep = &quot;\\t&quot;, as.is = TRUE) head(study_2) ## subject_id Sex Age Height ## 1 HG00099 F 40 185.5 ## 2 HG00103 M 50 190.8 ## 3 HG00106 F 51 165.5 ## 4 HG00107 M 39 195.8 ## 5 HG00109 M 48 181.5 ## 6 HG00111 F 42 194.9 study_3 &lt;- read.table(&quot;data/pheno_data_study_3.txt&quot;, header = TRUE, sep = &quot;\\t&quot;, as.is = TRUE) head(study_3) ## subject_id sex age height ## 1 HG00097 F 47 57.0 ## 2 HG00100 F 45 59.3 ## 3 HG00101 M 40 70.0 ## 4 HG00105 M 34 62.4 ## 5 HG00108 M 47 66.3 ## 6 HG00110 F 44 62.7 Look carefully at the output and see if anything looks suspicious. You may have noticed that one of the studies has given their variables slightly different names than the others. Rename them as appropriate. names(study_2) ## [1] &quot;subject_id&quot; &quot;Sex&quot; &quot;Age&quot; &quot;Height&quot; study_2 &lt;- study_2 %&gt;% rename(sex = Sex, age = Age, height = Height) # Check that they are correct. names(study_2) ## [1] &quot;subject_id&quot; &quot;sex&quot; &quot;age&quot; &quot;height&quot; You’ll also want to calculate summaries of the data values to see if anything looks very different than what you expect. summary(study_1$height) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 139.6 163.8 169.9 170.2 176.7 200.3 summary(study_2$height) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 142.1 171.8 181.3 180.8 190.5 218.6 summary(study_3$height) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 47.00 59.60 63.40 63.42 67.10 79.60 Here, the values that study_3 has given you don’t seem to have the same range as those from study_1 and study_2. In cases like this, you’ll want to follow up with whoever provided the harmonized data to see what’s going on. It could represent an error in calculating the harmonized data values, a true property of the study (e.g., a study containing all children), or something else. In this case, the values were measured in inches instead of centimeters, so they will need to be converted to centimeters to be compatible with the other studies. study_3 &lt;- study_3 %&gt;% mutate(height = height * 2.54) Calculate the summary again and compare it to the other studies above. summary(study_3$height) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 119.4 151.4 161.0 161.1 170.4 202.2 The corrected values look much more similar now. Note that this sort of error is easy to correct, but it is not uncommon to have more subtle issues that need to be addressed when working with phenotype data. Knowledge of the study design as well as the phenotype area of interest is essential to address them properly. Additionally, different decisions may need to be made for different analyses based on the specific questions they are trying to answer. 4.2 Compare study values Next we will make some more direct comparisons between the three studies, so we will combine the data into one data frame. First, add a study identifier to the data frame for organizational purposes. study_1$study &lt;- &quot;study_1&quot; study_2$study &lt;- &quot;study_2&quot; study_3$study &lt;- &quot;study_3&quot; Combine the three different study data frames into one large data frame for joint analysis. Double check that all column names are the same. all.equal(names(study_1), names(study_2)) ## [1] TRUE all.equal(names(study_1), names(study_3)) ## [1] TRUE phen &lt;- dplyr::bind_rows(study_1, study_2, study_3) We can look at the distribution of phenotype data with text-based reports or with plots. First, inspect distributions with table for categorical traits and with summary for quantitative traits. The commads are shown here for study_1, but you should run them for study_2 and study_3 as well to see if you can see any differences. table(study_1$sex) ## ## F M ## 190 185 summary(study_1$age) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 32.00 41.00 45.00 45.17 49.00 62.00 summary(study_1$height) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 139.6 163.8 169.9 170.2 176.7 200.3 It is also helpful to use plots to inspect the distributions of phenotype data. Here, we will look at boxplots of height by study. library(ggplot2) ggplot(phen, aes(x = study, y = height)) + geom_boxplot() You may also want to see the difference in height when you include both study and sex: ggplot(phen, aes(x = study, fill = sex, y = height)) + geom_boxplot() These diagnostics are helpful to get a feel for the data. They can help you see if one study is vastly different from the others or detect outlier values that you may want to look into further. Some of the differences could also be accounted for by covariates. 4.3 Using null models to compare studies The quick diagnostics in the previous section let you see if the data from one study are completely different from the others, but such differences could be due to other factors that could be adjusted for in analysis. To account for these other factors, we need to fit a statistical model to the data. Because some of the studies in TOPMed have related individuals, we need to fit a null model to account for the correlation in the data. In this case, because the phenotype is quantitative, we will use a linear model. We use the GENESIS R package for fitting the null model. It is also the same package that we use for the association analyses, so this exercise provides a brief introduction to the package and some of the associated data structures. 4.3.1 Create an Annotated Data Frame The first step in fitting the null model is to create an AnnotatedDataFrame. This data structure is provided by the Bioconductor Biobase package, and it contains both the data and metadata. You should include a description of each variable in the metadata. library(Biobase) metadata &lt;- data.frame(labelDescription = c( &quot;subject identifier&quot;, &quot;subject&#39;s sex&quot;, &quot;age at measurement of height&quot;, &quot;subject&#39;s height in cm&quot;, &quot;study identifier&quot; )) annot &lt;- AnnotatedDataFrame(phen, metadata) # access the data with the pData() function head(pData(annot)) ## subject_id sex age height study ## 1 HG00096 M 47 165.3 study_1 ## 2 HG00102 F 49 169.1 study_1 ## 3 HG00112 M 46 167.9 study_1 ## 4 HG00114 M 49 169.5 study_1 ## 5 HG00115 M 35 161.1 study_1 ## 6 HG00116 M 37 182.2 study_1 # access the metadata with the varMetadata() function varMetadata(annot) ## labelDescription ## subject_id subject identifier ## sex subject&#39;s sex ## age age at measurement of height ## height subject&#39;s height in cm ## study study identifier Save the AnnotatedDataFrame for future use. save(annot, file = &quot;data/phenotype_annotation.RData&quot;) The GENESIS code to fit the null model also requires a sample.id column. Typically the sample.id column represents a sample identifier, not a subject id. In this case, we are only working with subject-level data, so we can use the subject identifier as the sample identifier for model-fitting purposes. annot$sample.id &lt;- annot$subject_id 4.3.2 Fit a null model without study We will first fit a null model that allows us to see if the mean of the height phenotype is different by study after adjusting for other covariates. In this case, we will adjust for age and sex, but not for study, because we are interested in seeing differences in mean height by study. outcome &lt;- &quot;height&quot; covars &lt;- c(&quot;sex&quot;, &quot;age&quot;) library(GENESIS) mod_1 &lt;- GENESIS::fitNullModel(annot, outcome = outcome, covars = covars) The output of fitNullModel is a list with a number of named elements names(mod_1) ## [1] &quot;family&quot; &quot;hetResid&quot; &quot;varComp&quot; &quot;varCompCov&quot; ## [5] &quot;fixef&quot; &quot;betaCov&quot; &quot;fitted.values&quot; &quot;resid.marginal&quot; ## [9] &quot;logLik&quot; &quot;AIC&quot; &quot;workingY&quot; &quot;outcome&quot; ## [13] &quot;model.matrix&quot; &quot;group.idx&quot; &quot;cholSigmaInv&quot; &quot;converged&quot; ## [17] &quot;zeroFLAG&quot; &quot;RSS&quot; &quot;Ytilde&quot; &quot;resid&quot; ## [21] &quot;CX&quot; &quot;CXCXI&quot; &quot;RSS0&quot; &quot;sample.id&quot; The elements that we will work with in this exercise are: converged: an indicator of whether the model successfully converged model.matrix: The matrix of subject-covariate values used to fit the model fixef: The fitted fixed effects betaCov: The covariance of the fitted fixed effects resid.marginal: The (marginal) residuals from the model, which have been adjusted for the fixed effects but not for the covariance structure varComp: The fitted variance components Make sure the model converged. mod_1$converged ## [1] TRUE Now, add the residuals to the phenotype data frame for plotting. We need to make sure that we are matching each residual value to the correct subject. In this case, model.matrix is already in the same order as the input AnnotatedDataFrame, but this may not always be the case (for example, if subjects are excluded due to missing phentoype data). To match the same subject’s values together, we use the row names of the model.matrix element of the output, which are in the same order as the residual matrix, and the subject_id column of the annotated data frame. We then match the row names (and therefore the residuals) to the sample identifier in the phenotype file using the base R function match. j &lt;- match(annot$sample.id, rownames(mod_1$model.matrix)) annot$residuals &lt;- mod_1$resid.marginal[j] Next, we want to check if the different studies have the same mean height after adjustment for other covariates (here, age and sex). We will first do this qualitatively by making a boxplot of the residuals by study. ggplot(pData(annot), aes(x = study, y = residuals)) + geom_boxplot() From the boxplot, it is clear that the different studies have different mean heights, even after adjustment for sex and age. At this point, you would need to determine if the differences are acceptable for use in a combined analysis. 4.3.3 Fit a model with study Next, we can look at a model that adjusts for other covariates as well as study. This model allows us to run a statistical test on the fitted study means and to qualitatively check if the variances are the same after adjusting for mean effects. The outcome is the same, but we now add the study as a covariate. We also allow for group-specific residual variance by study using the group.var argument to fitNullModel. # include the study in the covariates covars &lt;- c(&quot;age&quot;, &quot;sex&quot;, &quot;study&quot;) mod_2 &lt;- GENESIS::fitNullModel(annot, outcome = outcome, covars = covars, group.var = &quot;study&quot;) The fixef element now includes effects for study: mod_2$fixef ## Est SE Stat pval ## (Intercept) 163.67175933 3.18936046 2633.542247 0.000000e+00 ## age 0.07519782 0.06921691 1.180283 2.772984e-01 ## sexM 6.28764509 0.68812251 83.491932 6.397653e-20 ## studystudy_2 10.63152325 0.82176939 167.375182 2.769992e-38 ## studystudy_3 -8.96183691 0.84479021 112.537257 2.724959e-26 The null model also shows the differences in mean height by study. Finally, we want to check if the height distributions from the different studies have the same variance. Start by looking at the variance components (varComp) element of the model. mod_2$varComp ## study_1 study_2 study_3 ## 98.20191 155.70722 168.82044 The variance components (V_study_1, V_study_2, and V_study_3) represent the residual variance in each study. The fitted values of the variance components are different for the different studies, indicating that the distributions of height in the three studies have different variance even after accounting for the other covariates. We can also show the same information by plotting the residuals by study. We first have to add the residuals from this model to the AnnotatedDataFrame. annot$residuals &lt;- mod_2$resid.marginal Next make a boxplot of the residuals by study. ggplot(pData(annot), aes(x = study, y = residuals)) + geom_boxplot() Both methods of looking at the variance components indicate that study 1 has a smaller residual variance than the others. 4.4 Final considerations We have determined that the different studies have both different mean and different variance by study for height. Before performing genotype-phenotype association tests with these data, you would need to think carefully about whether the phenotype is homogeneous enough to be analyzed together. In some cases, there may be a valid reason for different means or variances, for example: different heights in different study populations, such as a study composed primarily of Asian participants vs. a study with primarily European participants or a study of all men vs. a study of all women; possible secular trends in height, such as comparing the Framingham Original cohort from ~1950 to a cohort from the present day. In other cases, there may be good reasons to exclude one or more studies, for example: a systematic measurement error in one study miscalculation or misinterpretation of the harmonization algorithm study populations that are too different to be compared, such as trying to include a study composed primarily of children with one composed of adults in a height analysis It may be necessary to look at other variables that you had not previously considered. Studies may have used different measurement equipment or calibrated their data differently. There might also be other batch effects due to lab procedures or assays that could result in differences in the variance or mean by study. The other variables that you may need to consider are highly dependent both on the phenotype being harmonized and on how a given study has been designed. Unfortunately there is no single set of guidelines you can use to decide how to proceed with analysis of a phenotype. It is necessary to involve both domain experts and study experts to determine whether the phenotype is homogeneous enough to use in cross-study analysis. "],
["association-tests.html", "5 Association tests 5.1 Null model 5.2 Single-variant tests 5.3 Exercises 5.4 Sliding window tests 5.5 Exercise", " 5 Association tests These exercises introduce association testing: how to find which genetic variants are associated with a phenotype. 5.1 Null model The first step in an association test is to fit the null model. We will need an AnnotatedDataFrame with phenotypes. We have a sample annotation with a sample.id column matched to the GDS file, and a phenotype file with subject_id. (In this example, we use the 1000 Genomes IDs for both sample and subject ID.) For TOPMed data, it is also important to match by study, as subject IDs are not unique across studies. # sample annotation repo_path &lt;- &quot;https://github.com/UW-GAC/SISG_2020/raw/master&quot; if (!dir.exists(&quot;data&quot;)) dir.create(&quot;data&quot;) sampfile &lt;- &quot;data/sample_annotation.RData&quot; if (!file.exists(sampfile)) download.file(file.path(repo_path, sampfile), sampfile) annot &lt;- TopmedPipeline::getobj(sampfile) library(Biobase) head(pData(annot)) ## sample.id subject.id Population Population.Description sex status ## 1 HG00096 HG00096 GBR British in England and Scotland M 0 ## 2 HG00097 HG00097 GBR British in England and Scotland F 1 ## 3 HG00099 HG00099 GBR British in England and Scotland F 0 ## 4 HG00100 HG00100 GBR British in England and Scotland F 1 ## 5 HG00101 HG00101 GBR British in England and Scotland M 0 ## 6 HG00102 HG00102 GBR British in England and Scotland F 0 # phenotypes by subject ID phenfile &lt;- &quot;data/phenotype_annotation.RData&quot; if (!file.exists(phenfile)) download.file(file.path(repo_path, phenfile), phenfile) phen &lt;- TopmedPipeline::getobj(phenfile) # access the data with the pData() function head(pData(phen)) ## subject_id sex age height study ## 1 HG00096 M 47 165.3 study_1 ## 2 HG00102 F 49 169.1 study_1 ## 3 HG00112 M 46 167.9 study_1 ## 4 HG00114 M 49 169.5 study_1 ## 5 HG00115 M 35 161.1 study_1 ## 6 HG00116 M 37 182.2 study_1 # access the metadata with the varMetadata() function varMetadata(phen) ## labelDescription ## subject_id subject identifier ## sex subject&#39;s sex ## age age at measurement of height ## height subject&#39;s height in cm ## study study identifier # merge sample annotation with phenotypes library(dplyr) dat &lt;- pData(annot) %&gt;% left_join(pData(phen), by=c(&quot;subject.id&quot;=&quot;subject_id&quot;, &quot;sex&quot;=&quot;sex&quot;)) meta &lt;- bind_rows(varMetadata(annot), varMetadata(phen)[3:5,,drop=FALSE]) annot &lt;- AnnotatedDataFrame(dat, meta) save(annot, file=&quot;data/sample_phenotype_annotation.RData&quot;) We will test for an association between genotype and height, adjusting for sex, age, and study as covariates. If the sample set involves multiple distinct groups with different variances for the phenotype, we recommend allowing the model to use heterogeneous variance among groups with the parameter group.var. We saw in a previous exercise that the variance differs by study. library(GENESIS) nullmod &lt;- fitNullModel(annot, outcome=&quot;height&quot;, covars=c(&quot;sex&quot;, &quot;age&quot;, &quot;study&quot;), group.var=&quot;study&quot;, verbose=FALSE) save(nullmod, file=&quot;data/null_model.RData&quot;) We also recommend taking an inverse normal transform of the residuals and refitting the model. See the full procedure in the pipeline documentation. 5.2 Single-variant tests Now that we have a null model adjusting height for covariates, we can run an association test to look for genetic effects on height. Single-variant tests are the same as in GWAS. We use the assocTestSingle function in GENESIS. First, we have to create a SeqVarData object including both the GDS file and the sample annotation containing phenotypes. We then create a SeqVarBlockIterator object to iterate over blocks of variants. library(SeqVarTools) gdsfile &lt;- &quot;data/1KG_phase3_subset_chr1.gds&quot; if (!file.exists(gdsfile)) download.file(file.path(repo_path, gdsfile), gdsfile) gdsfmt::showfile.gds(closeall=TRUE) # make sure file is not already open gds &lt;- seqOpen(gdsfile) seqData &lt;- SeqVarData(gds, sampleData=annot) iterator &lt;- SeqVarBlockIterator(seqData, verbose=FALSE) assoc &lt;- assocTestSingle(iterator, nullmod) ## # of selected samples: 1,126 head(assoc) ## variant.id chr pos allele.index n.obs freq MAC Score ## 1 1 1 970546 1 1126 0.0039964476 9 -0.1191236 ## 2 2 1 985900 1 1126 0.0492895204 111 -1.6707553 ## 3 3 1 1025045 1 1126 0.0004440497 1 -0.2795838 ## 4 4 1 1265550 1 1126 0.0008880995 2 -0.1105487 ## 5 5 1 1472676 1 1126 0.0071047957 16 0.3630992 ## 6 6 1 1735725 1 1126 0.0022202487 5 -0.1300405 ## Score.SE Score.Stat Score.pval Est Est.SE PVE ## 1 0.2577712 -0.4621292 0.643988693 -1.792788 3.879410 0.0001905115 ## 2 0.8841849 -1.8895996 0.058811535 -2.137109 1.130985 0.0031851797 ## 3 0.1007173 -2.7759261 0.005504472 -27.561563 9.928781 0.0068740102 ## 4 0.1085480 -1.0184319 0.308472744 -9.382319 9.212515 0.0009252485 ## 5 0.3456555 1.0504657 0.293504065 3.039054 2.893054 0.0009843694 ## 6 0.1973175 -0.6590420 0.509868790 -3.340007 5.067973 0.0003874544 We make a QQ plot to examine the results. library(ggplot2) qqPlot &lt;- function(pval) { pval &lt;- pval[!is.na(pval)] n &lt;- length(pval) x &lt;- 1:n dat &lt;- data.frame(obs=sort(pval), exp=x/n, upper=qbeta(0.025, x, rev(x)), lower=qbeta(0.975, x, rev(x))) ggplot(dat, aes(-log10(exp), -log10(obs))) + geom_line(aes(-log10(exp), -log10(upper)), color=&quot;gray&quot;) + geom_line(aes(-log10(exp), -log10(lower)), color=&quot;gray&quot;) + geom_point() + geom_abline(intercept=0, slope=1, color=&quot;red&quot;) + xlab(expression(paste(-log[10], &quot;(expected P)&quot;))) + ylab(expression(paste(-log[10], &quot;(observed P)&quot;))) + theme_bw() } qqPlot(assoc$Score.pval) 5.3 Exercises Logistic regression: fitNullModel can use a binary phenotype as the outcome variable by specifying the argument family=binomial. Use the status column in the sample annotation to fit a null model for simulated case/control status, with sex and Population as covariates. Then run a single-variant test using this model. Inverse normal transform: use the function nullModelInvNorm to perform an inverse normal transform on the height variable. Compare these residuals with the residuals from the original null model. 5.4 Sliding window tests For rare variants, we can do burden tests or SKAT using the GENESIS function assocTestAggregate. We restrict the test to variants with alternate allele frequency &lt; 0.1. (For real data, this threshold would be lower.) We use a flat weighting scheme. We define a sliding window across the genome using a SeqVarWindowIterator. seqResetFilter(seqData, verbose=FALSE) iterator &lt;- SeqVarWindowIterator(seqData, windowSize=5000, windowShift=2000, verbose=FALSE) assoc &lt;- assocTestAggregate(iterator, nullmod, test=&quot;Burden&quot;, AF.max=0.1, weight.beta=c(1,1)) ## # of selected samples: 1,126 names(assoc) ## [1] &quot;results&quot; &quot;variantInfo&quot; head(assoc$results) ## chr start end n.site n.alt n.sample.alt Score Score.SE Score.Stat ## 1 1 966001 971000 1 9 9 -0.1191236 0.2577712 -0.4621292 ## 2 1 982001 987000 1 111 107 -1.6707553 0.8841849 -1.8895996 ## 3 1 1022001 1027000 1 1 1 -0.2795838 0.1007173 -2.7759261 ## 4 1 1262001 1267000 1 2 2 -0.1105487 0.1085480 -1.0184319 ## 5 1 1468001 1473000 1 16 16 0.3630992 0.3456555 1.0504657 ## 6 1 1732001 1737000 1 5 5 -0.1300405 0.1973175 -0.6590420 ## Score.pval Est Est.SE PVE ## 1 0.643988693 -1.792788 3.879410 0.0001905115 ## 2 0.058811535 -2.137109 1.130985 0.0031851797 ## 3 0.005504472 -27.561563 9.928781 0.0068740102 ## 4 0.308472744 -9.382319 9.212515 0.0009252485 ## 5 0.293504065 3.039054 2.893054 0.0009843694 ## 6 0.509868790 -3.340007 5.067973 0.0003874544 head(assoc$variantInfo) ## [[1]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 1 1 970546 1 1126 0.003996448 9 1 ## ## [[2]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 2 1 985900 1 1126 0.04928952 111 1 ## ## [[3]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 3 1 1025045 1 1126 0.0004440497 1 1 ## ## [[4]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 4 1 1265550 1 1126 0.0008880995 2 1 ## ## [[5]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 5 1 1472676 1 1126 0.007104796 16 1 ## ## [[6]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 6 1 1735725 1 1126 0.002220249 5 1 qqPlot(assoc$results$Score.pval) For SKAT, we use the Wu weights. seqResetFilter(seqData, verbose=FALSE) iterator &lt;- SeqVarWindowIterator(seqData, windowSize=5000, windowShift=2000, verbose=FALSE) assoc &lt;- assocTestAggregate(iterator, nullmod, test=&quot;SKAT&quot;, AF.max=0.1, weight.beta=c(1,25)) ## # of selected samples: 1,126 head(assoc$results) ## chr start end n.site n.alt n.sample.alt Q pval err ## 1 1 966001 971000 1 9 9 7.318095 0.643988693 0 ## 2 1 982001 987000 1 111 107 154.178289 0.058811535 0 ## 3 1 1022001 1027000 1 1 1 47.823918 0.005504472 0 ## 4 1 1262001 1267000 1 2 2 7.319239 0.308472744 0 ## 5 1 1468001 1473000 1 16 16 58.518665 0.293504065 0 ## 6 1 1732001 1737000 1 5 5 9.499539 0.509868790 0 ## pval.method ## 1 integration ## 2 integration ## 3 integration ## 4 integration ## 5 integration ## 6 integration head(assoc$variantInfo) ## [[1]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 1 1 970546 1 1126 0.003996448 9 22.70917 ## ## [[2]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 2 1 985900 1 1126 0.04928952 111 7.431881 ## ## [[3]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 3 1 1025045 1 1126 0.0004440497 1 24.73493 ## ## [[4]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 4 1 1265550 1 1126 0.0008880995 2 24.47255 ## ## [[5]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 5 1 1472676 1 1126 0.007104796 16 21.06793 ## ## [[6]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 6 1 1735725 1 1126 0.002220249 5 23.70132 qqPlot(assoc$results$pval) 5.5 Exercise Repeat the previous exercise on logistic regression, this time running a sliding-window test. "],
["association-tests-solutions.html", "6 Association tests - Solutions", " 6 Association tests - Solutions Logistic regression: fitNullModel can use a binary phenotype as the outcome variable by specifying the argument family=binomial. Use the status column in the sample annotation to fit a null model for simulated case/control status, with sex and Population as covariates. Then run a single-variant test using this model. nullmod.status &lt;- fitNullModel(annot, outcome=&quot;status&quot;, covars=c(&quot;sex&quot;, &quot;Population&quot;), family=binomial, verbose=FALSE) resetIterator(iterator, verbose=FALSE) assoc &lt;- assocTestSingle(iterator, nullmod.status, test=&quot;Score&quot;) ## # of selected samples: 1,126 head(assoc) ## variant.id chr pos allele.index n.obs freq MAC Score ## 1 1 1 970546 1 1126 0.0039964476 9 0.20256722 ## 2 2 1 985900 1 1126 0.0492895204 111 -2.64169956 ## 3 3 1 1025045 1 1126 0.0004440497 1 -0.09916904 ## 4 4 1 1265550 1 1126 0.0008880995 2 0.81717324 ## 5 5 1 1472676 1 1126 0.0071047957 16 0.64418361 ## 6 6 1 1735725 1 1126 0.0022202487 5 -0.46319177 ## Score.SE Score.Stat Score.pval Est Est.SE PVE ## 1 0.8351783 0.2425437 0.80835892 0.2904095 1.1973491 5.242118e-05 ## 2 2.6522412 -0.9960254 0.31923781 -0.3755410 0.3770396 8.840314e-04 ## 3 0.2972472 -0.3336248 0.73866267 -1.1223819 3.3642035 9.918446e-05 ## 4 0.4033577 2.0259271 0.04277226 5.0226565 2.4791892 3.657417e-03 ## 5 1.0778277 0.5976685 0.55006117 0.5545121 0.9277921 3.183080e-04 ## 6 0.6396675 -0.7241134 0.46899613 -1.1320153 1.5633123 4.672400e-04 Inverse normal transform: use the function nullModelInvNorm to perform an inverse normal transform on the height variable. Compare these residuals with the residuals from the original null model. nullmod.norm &lt;- nullModelInvNorm(nullmod, verbose=FALSE) summary(nullmod$resid.marginal) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -38.9394 -7.6295 -0.1089 0.0000 8.0824 44.6166 summary(nullmod.norm$resid.marginal) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -3.0075251 -0.6717166 -0.0000291 0.0000000 0.6751482 3.0032466 Repeat the previous exercise on logistic regression, this time running a sliding-window test. nullmod.status &lt;- fitNullModel(annot, outcome=&quot;status&quot;, covars=c(&quot;sex&quot;, &quot;Population&quot;), family=binomial, verbose=FALSE) seqResetFilter(seqData, verbose=FALSE) iterator &lt;- SeqVarWindowIterator(seqData, windowSize=5000, windowShift=2000, verbose=FALSE) assoc &lt;- assocTestAggregate(iterator, nullmod, test=&quot;SKAT&quot;, AF.max=0.1, weight.beta=c(1,25)) ## # of selected samples: 1,126 head(assoc$results) ## chr start end n.site n.alt n.sample.alt Q pval err ## 1 1 966001 971000 1 9 9 7.318095 0.643988693 0 ## 2 1 982001 987000 1 111 107 154.178289 0.058811535 0 ## 3 1 1022001 1027000 1 1 1 47.823918 0.005504472 0 ## 4 1 1262001 1267000 1 2 2 7.319239 0.308472744 0 ## 5 1 1468001 1473000 1 16 16 58.518665 0.293504065 0 ## 6 1 1732001 1737000 1 5 5 9.499539 0.509868790 0 ## pval.method ## 1 integration ## 2 integration ## 3 integration ## 4 integration ## 5 integration ## 6 integration seqClose(gds) "],
["computing-a-grm.html", "7 Computing a GRM", " 7 Computing a GRM We can use the SNPRelate package to compute a Genetic Relationship matrix (GRM). This method combines relatedness due to more distant ancestry and recent kinship into a single matrix. SNPRelate offers several algorithms for computing a GRM, including the commonly-used GCTA Yang et al 2011. The most recent algorithm added to the package is “IndivBeta” Weir and Goudet 2017. library(SeqArray) repo_path &lt;- &quot;https://github.com/UW-GAC/SISG_2020/raw/master&quot; if (!dir.exists(&quot;data&quot;)) dir.create(&quot;data&quot;) gdsfile &lt;- &quot;data/1KG_phase3_subset_chr1.gds&quot; if (!file.exists(gdsfile)) download.file(file.path(repo_path, gdsfile), gdsfile) gdsfmt::showfile.gds(closeall=TRUE) # make sure file is not already open gds &lt;- seqOpen(gdsfile) library(SNPRelate) grm &lt;- snpgdsGRM(gds, method=&quot;GCTA&quot;) ## Genetic Relationship Matrix (GRM, GCTA): ## Calculating allele counts/frequencies ... ## [..................................................] 0%, ETC: --- [==================================================] 100%, completed, 1s ## Excluding 13 SNVs (monomorphic: TRUE, MAF: NaN, missing rate: NaN) ## Working space: 1,126 samples, 1,107 SNVs ## using 1 (CPU) core ## CPU capabilities: Double-Precision SSE2 ## Mon Jul 27 15:04:46 2020 (internal increment: 664) ## [..................................................] 0%, ETC: --- [==================================================] 100%, completed, 0s ## Mon Jul 27 15:04:46 2020 Done. names(grm) ## [1] &quot;sample.id&quot; &quot;snp.id&quot; &quot;method&quot; &quot;grm&quot; dim(grm$grm) ## [1] 1126 1126 seqClose(gds) "],
["pc-relate.html", "8 PC-Relate 8.1 KING 8.2 PC-AiR 8.3 PC-Relate 8.4 Comparison with pedigree 8.5 Exercise", " 8 PC-Relate To disentangle ancestry from recent familial relatedness, we use the PC-Relate method. 8.1 KING Step 1 is to get initial estimates of kinship using KING, which is robust to population structure but not admixture. The KING algorithm is available in SNPRelate. We select a subset of variants for this calculation with LD pruning. # use a GDS file with all chromosomes library(SeqArray) gdsfile &lt;- &quot;data/1KG_phase3_subset.gds&quot; if (!file.exists(gdsfile)) download.file(file.path(repo_path, gdsfile), gdsfile) gdsfmt::showfile.gds(closeall=TRUE) # make sure file is not already open gds &lt;- seqOpen(gdsfile) # use a subset of 100 samples to make things run faster sampfile &lt;- &quot;data/samples_subset100.RData&quot; if (!file.exists(sampfile)) download.file(file.path(repo_path, sampfile), sampfile) sample.id &lt;- TopmedPipeline::getobj(sampfile) # LD pruning to get variant set library(SNPRelate) set.seed(100) # LD pruning has a random element; so make this reproducible snpset &lt;- snpgdsLDpruning(gds, sample.id=sample.id, method=&quot;corr&quot;, slide.max.bp=10e6, ld.threshold=sqrt(0.1)) ## SNV pruning based on LD: ## Excluding 1,120 SNVs on non-autosomes ## Calculating allele counts/frequencies ... ## [..................................................] 0%, ETC: --- [==================================================] 100%, completed, 0s ## Excluding 13,673 SNVs (monomorphic: TRUE, MAF: NaN, missing rate: NaN) ## Working space: 100 samples, 10,967 SNVs ## using 1 (CPU) core ## sliding window: 10,000,000 basepairs, Inf SNPs ## |LD| threshold: 0.316228 ## method: correlation ## Chromosome 1: 31.34%, 351/1,120 ## Chromosome 2: 31.43%, 352/1,120 ## Chromosome 3: 30.98%, 347/1,120 ## Chromosome 4: 31.16%, 349/1,120 ## Chromosome 5: 29.64%, 332/1,120 ## Chromosome 6: 31.43%, 352/1,120 ## Chromosome 7: 28.66%, 321/1,120 ## Chromosome 8: 25.62%, 287/1,120 ## Chromosome 9: 27.32%, 306/1,120 ## Chromosome 10: 28.57%, 320/1,120 ## Chromosome 11: 26.79%, 300/1,120 ## Chromosome 12: 28.66%, 321/1,120 ## Chromosome 13: 25.54%, 286/1,120 ## Chromosome 14: 24.29%, 272/1,120 ## Chromosome 15: 22.59%, 253/1,120 ## Chromosome 16: 21.88%, 245/1,120 ## Chromosome 17: 21.79%, 244/1,120 ## Chromosome 18: 23.57%, 264/1,120 ## Chromosome 19: 21.25%, 238/1,120 ## Chromosome 20: 20.00%, 224/1,120 ## Chromosome 21: 17.50%, 196/1,120 ## Chromosome 22: 17.50%, 196/1,120 ## 6,356 markers are selected in total. sapply(snpset, length) ## chr1 chr2 chr3 chr4 chr5 chr6 chr7 chr8 chr9 chr10 chr11 chr12 chr13 ## 351 352 347 349 332 352 321 287 306 320 300 321 286 ## chr14 chr15 chr16 chr17 chr18 chr19 chr20 chr21 chr22 ## 272 253 245 244 264 238 224 196 196 pruned &lt;- unlist(snpset, use.names=FALSE) # KING king &lt;- snpgdsIBDKING(gds, sample.id=sample.id, snp.id=pruned) ## IBD analysis (KING method of moment) on genotypes: ## Calculating allele counts/frequencies ... ## [..................................................] 0%, ETC: --- [==================================================] 100%, completed, 0s ## Working space: 100 samples, 6,356 SNVs ## using 1 (CPU) core ## No family is specified, and all individuals are treated as singletons. ## Relationship inference in the presence of population stratification. ## CPU capabilities: Double-Precision SSE2 ## Mon Jul 27 15:04:47 2020 (internal increment: 65536) ## [..................................................] 0%, ETC: --- [==================================================] 100%, completed, 0s ## Mon Jul 27 15:04:47 2020 Done. names(king) ## [1] &quot;sample.id&quot; &quot;snp.id&quot; &quot;afreq&quot; &quot;IBS0&quot; &quot;kinship&quot; dim(king$kinship) ## [1] 100 100 kingMat &lt;- king$kinship colnames(kingMat) &lt;- rownames(kingMat) &lt;- king$sample.id We extract pairwise kinship estimates and IBS0 to plot. kinship &lt;- snpgdsIBDSelection(king) head(kinship) ## ID1 ID2 IBS0 kinship ## 1 HG00110 HG00116 0.02564506 -0.01271186 ## 2 HG00110 HG00120 0.02721838 -0.02814770 ## 3 HG00110 HG00128 0.02454374 -0.01150121 ## 4 HG00110 HG00136 0.02926369 -0.04388620 ## 5 HG00110 HG00137 0.02737571 -0.03510896 ## 6 HG00110 HG00141 0.02769037 -0.03843826 library(ggplot2) ggplot(kinship, aes(IBS0, kinship)) + geom_hline(yintercept=2^(-seq(3,9,2)/2), linetype=&quot;dashed&quot;, color=&quot;grey&quot;) + geom_point(alpha=0.5) + ylab(&quot;kinship estimate&quot;) + theme_bw() 8.2 PC-AiR The next step is PC-AiR, in which we select a set of unrelated samples that is maximally informative about all ancestries in the sample. We use this unrelated set for Principal Component Analysis (PCA), then project the relatives onto the PCs. First, we partition the samples into a related and unrelated set. We use a kinship threshold of degree 3, which corresponds to first cousins. This defines anyone less related than first cousins as “unrelated”. We load the GENESIS package. In the first iteration, we use the KING estimates for both kinship (kinMat) and ancestry divergence (divMat). KING kinship estimates are negative for samples with different ancestry. library(GENESIS) sampset &lt;- pcairPartition(kinobj=kingMat, kin.thresh=2^(-9/2), divobj=kingMat, div.thresh=-2^(-9/2)) names(sampset) ## [1] &quot;rels&quot; &quot;unrels&quot; sapply(sampset, length) ## rels unrels ## 15 85 Using the SNPRelate package, we run PCA on the unrelated set and project values for the related set. We use the same LD pruned set of variants again. # run PCA on unrelated set pca.unrel &lt;- snpgdsPCA(gds, sample.id=sampset$unrels, snp.id=pruned) ## Principal Component Analysis (PCA) on genotypes: ## Calculating allele counts/frequencies ... ## [..................................................] 0%, ETC: --- [==================================================] 100%, completed, 0s ## Excluding 223 SNVs (monomorphic: TRUE, MAF: NaN, missing rate: NaN) ## Working space: 85 samples, 6,133 SNVs ## using 1 (CPU) core ## CPU capabilities: Double-Precision SSE2 ## Mon Jul 27 15:04:48 2020 (internal increment: 8816) ## [..................................................] 0%, ETC: --- [==================================================] 100%, completed, 0s ## Mon Jul 27 15:04:48 2020 Begin (eigenvalues and eigenvectors) ## Mon Jul 27 15:04:48 2020 Done. # project values for relatives snp.load &lt;- snpgdsPCASNPLoading(pca.unrel, gdsobj=gds) ## SNP loading: ## Working space: 85 samples, 6133 SNPs ## using 1 (CPU) core ## using the top 32 eigenvectors ## Mon Jul 27 15:04:48 2020 (internal increment: 65536) ## [..................................................] 0%, ETC: --- [==================================================] 100%, completed, 0s ## Mon Jul 27 15:04:48 2020 Done. samp.load &lt;- snpgdsPCASampLoading(snp.load, gdsobj=gds, sample.id=sampset$rels) ## Sample loading: ## Working space: 15 samples, 6133 SNPs ## using 1 (CPU) core ## using the top 32 eigenvectors ## Mon Jul 27 15:04:48 2020 (internal increment: 65536) ## [..................................................] 0%, ETC: --- [==================================================] 100%, completed, 1s ## Mon Jul 27 15:04:49 2020 Done. # combine unrelated and related PCs and order as in GDS file pcs &lt;- rbind(pca.unrel$eigenvect, samp.load$eigenvect) rownames(pcs) &lt;- c(pca.unrel$sample.id, samp.load$sample.id) samp.ord &lt;- match(sample.id, rownames(pcs)) pcs &lt;- pcs[samp.ord,] We need to determine which PCs are ancestry informative. To do this we need population information for the 1000 Genomes samples. This information is stored in an AnnotatedDataFrame, which is a data.frame with optional metadata describing the columns. The class is defined in the Biobase package. We load the stored object using the getobj function from the TopmedPipeline package. library(Biobase) sampfile &lt;- &quot;data/sample_annotation.RData&quot; if (!file.exists(sampfile)) download.file(file.path(repo_path, sampfile), sampfile) annot &lt;- TopmedPipeline::getobj(sampfile) annot ## An object of class &#39;AnnotatedDataFrame&#39; ## rowNames: 1 2 ... 2504 (1126 total) ## varLabels: sample.id subject.id ... status (6 total) ## varMetadata: labelDescription head(pData(annot)) ## sample.id subject.id Population Population.Description sex status ## 1 HG00096 HG00096 GBR British in England and Scotland M 0 ## 2 HG00097 HG00097 GBR British in England and Scotland F 1 ## 3 HG00099 HG00099 GBR British in England and Scotland F 0 ## 4 HG00100 HG00100 GBR British in England and Scotland F 1 ## 5 HG00101 HG00101 GBR British in England and Scotland M 0 ## 6 HG00102 HG00102 GBR British in England and Scotland F 0 varMetadata(annot) ## labelDescription ## sample.id sample identifier ## subject.id subject identifier ## Population population abbreviation ## Population.Description population description ## sex sex ## status simulated case/control status We make a parallel coordinates plot, color-coding by 1000 Genomes population. We load the dplyr package for data.frame manipulation. pc.df &lt;- as.data.frame(pcs) names(pc.df) &lt;- 1:ncol(pcs) pc.df$sample.id &lt;- row.names(pcs) library(dplyr) annot &lt;- pData(annot) %&gt;% dplyr::select(sample.id, Population) pc.df &lt;- left_join(pc.df, annot, by=&quot;sample.id&quot;) library(GGally) library(RColorBrewer) pop.cols &lt;- setNames(brewer.pal(12, &quot;Paired&quot;), c(&quot;ACB&quot;, &quot;ASW&quot;, &quot;CEU&quot;, &quot;GBR&quot;, &quot;CHB&quot;, &quot;JPT&quot;, &quot;CLM&quot;, &quot;MXL&quot;, &quot;LWK&quot;, &quot;YRI&quot;, &quot;GIH&quot;, &quot;PUR&quot;)) ggparcoord(pc.df, columns=1:12, groupColumn=&quot;Population&quot;, scale=&quot;uniminmax&quot;) + scale_color_manual(values=pop.cols) + xlab(&quot;PC&quot;) + ylab(&quot;&quot;) 8.3 PC-Relate The first 2 PCs separate populations, so we use them to compute kinship estimates adjusting for ancestry. The PC-Relate function expects a SeqVarIterator object. seqResetFilter(gds, verbose=FALSE) library(SeqVarTools) seqData &lt;- SeqVarData(gds) seqSetFilter(seqData, variant.id=pruned) ## # of selected variants: 6,356 iterator &lt;- SeqVarBlockIterator(seqData, verbose=FALSE) pcrel &lt;- pcrelate(iterator, pcs=pcs[,1:2], training.set=sampset$unrels, sample.include=sample.id) names(pcrel) ## [1] &quot;kinBtwn&quot; &quot;kinSelf&quot; PC-Relate is an iterative method. Now that we have ancestry-adjusted kinship estimates, we can use them to better adjust for ancestry in the PCs. This time we use the pcair function, which combines partitioning the sample set and running PCA in one step. First we need to make a kinship matrix from the PC-Relate results. The KING matrix is still used for ancestry divergence. pcrelMat &lt;- pcrelateToMatrix(pcrel, scaleKin=1, verbose=FALSE) seqResetFilter(seqData, verbose=FALSE) pca &lt;- pcair(seqData, kinobj=pcrelMat, kin.thresh=2^(-9/2), divobj=kingMat, div.thresh=-2^(-9/2), sample.include=sample.id, snp.include=pruned, verbose=FALSE) names(pca) ## [1] &quot;vectors&quot; &quot;values&quot; &quot;rels&quot; &quot;unrels&quot; &quot;kin.thresh&quot; ## [6] &quot;div.thresh&quot; &quot;sample.id&quot; &quot;nsamp&quot; &quot;nsnps&quot; &quot;varprop&quot; ## [11] &quot;call&quot; &quot;method&quot; pcs &lt;- pca$vectors pc.df &lt;- as.data.frame(pcs) names(pc.df) &lt;- paste0(&quot;PC&quot;, 1:ncol(pcs)) pc.df$sample.id &lt;- row.names(pcs) pc.df &lt;- left_join(pc.df, annot, by=&quot;sample.id&quot;) ggplot(pc.df, aes(PC1, PC2, color=Population)) + geom_point() + scale_color_manual(values=pop.cols) Now we use the revised PCs to compute new kinship estimates. One can run the iteration multiple times and check for conversion, but usually two rounds are sufficient. seqSetFilter(seqData, variant.id=pruned) ## # of selected variants: 6,356 iterator &lt;- SeqVarBlockIterator(seqData, verbose=FALSE) pcrel &lt;- pcrelate(iterator, pcs=pcs[,1:2], training.set=pca$unrels, sample.include=sample.id) save(pcrel, file=&quot;data/pcrelate_kinship.RData&quot;) We plot the kinship estimates from PC-Relate, and notice that the values for less related pairs are much better behaved. kinship &lt;- pcrel$kinBtwn ggplot(kinship, aes(k0, kin)) + geom_hline(yintercept=2^(-seq(3,9,2)/2), linetype=&quot;dashed&quot;, color=&quot;grey&quot;) + geom_point(alpha=0.5) + ylab(&quot;kinship estimate&quot;) + theme_bw() seqClose(gds) 8.4 Comparison with pedigree We can detect pedigree errors and sample identity problems by comparing the pedigree with empirical kinship estimates. We use a function from the GWASTools package, pedigreePairwiseRelatedness, to get expected pairwise relationships based on the pedigree. pedfile &lt;- &quot;data/pedigree.RData&quot; if (!file.exists(pedfile)) download.file(file.path(repo_path, pedfile), pedfile) ped &lt;- TopmedPipeline::getobj(pedfile) head(ped) ## family individ father mother sex ## 1 BB01 HG01879 0 0 M ## 2 BB01 HG01880 0 0 F ## 3 BB01 HG01881 HG01879 HG01880 F ## 4 BB02 HG01882 0 0 M ## 5 BB02 HG01883 0 0 F ## 6 BB02 HG01888 HG01882 HG01883 M pw &lt;- GWASTools::pedigreePairwiseRelatedness(ped) names(pw) ## [1] &quot;inbred.fam&quot; &quot;inbred.KC&quot; &quot;relativeprs&quot; rel &lt;- pw$relativeprs head(rel) ## Individ1 Individ2 relation kinship family ## 1 HG01879 HG01880 U 0.00 BB01 ## 2 HG01879 HG01881 PO 0.25 BB01 ## 3 HG01880 HG01881 PO 0.25 BB01 ## 4 HG01882 HG01883 U 0.00 BB02 ## 5 HG01882 HG01888 PO 0.25 BB02 ## 6 HG01883 HG01888 PO 0.25 BB02 table(rel$relation) ## ## Av FS GpGc HAv HS PO U ## 2 6 16 1 3 616 330 distinct(rel, relation, kinship) %&gt;% arrange(-kinship) ## relation kinship ## 1 PO 0.2500 ## 2 FS 0.2500 ## 3 HS 0.1250 ## 4 GpGc 0.1250 ## 5 Av 0.1250 ## 6 HAv 0.0625 ## 7 U 0.0000 ## assign degrees to expected relationship pairs rel &lt;- rel %&gt;% mutate(exp.rel=ifelse(kinship == 0.125, &quot;Deg2&quot;, ifelse(kinship == 0.0625, &quot;Deg3&quot;, relation)), pair=GWASTools::pasteSorted(Individ1, Individ2)) %&gt;% select(pair, family, relation, exp.rel) ## assign degrees to observed relationship pairs cut.dup &lt;- 1/(2^(3/2)) cut.deg1 &lt;- 1/(2^(5/2)) cut.deg2 &lt;- 1/(2^(7/2)) cut.deg3 &lt;- 1/(2^(9/2)) cut.k0 &lt;- 0.1 kinship &lt;- kinship %&gt;% mutate(obs.rel=ifelse(kin &gt; cut.dup, &quot;Dup&quot;, ifelse(kin &gt; cut.deg1 &amp; k0 &lt; cut.k0, &quot;PO&quot;, ifelse(kin &gt; cut.deg1, &quot;FS&quot;, ifelse(kin &gt; cut.deg2, &quot;Deg2&quot;, ifelse(kin &gt; cut.deg3, &quot;Deg3&quot;, &quot;U&quot;)))))) table(kinship$obs.rel) ## ## Deg2 Deg3 FS PO U ## 4 6 2 7 4931 # merge observed and expected relationships kin.obs &lt;- kinship %&gt;% select(ID1, ID2, kin, k0, obs.rel) %&gt;% mutate(pair=GWASTools::pasteSorted(ID1, ID2)) %&gt;% left_join(rel, by=&quot;pair&quot;) %&gt;% select(-pair) %&gt;% mutate(exp.rel=ifelse(is.na(exp.rel), &quot;U&quot;, exp.rel)) %&gt;% filter(!(exp.rel == &quot;U&quot; &amp; obs.rel == &quot;U&quot;)) table(kin.obs$exp.rel, kin.obs$obs.rel) ## ## Deg2 Deg3 FS PO ## U 4 6 2 7 ggplot(kin.obs, aes(k0, kin, color=obs.rel)) + geom_point() All the observed relationships were unexpected. These samples are from 1000 Genomes sequencing, and known relatives were excluded from the released data. Here we have detected some cryptic relatives that were not annotated in the pedigree. 8.5 Exercise Complete one round of iteration using all samples from the test dataset and plot the results. Be sure to examine the parallel coordinates plot to determine the appropriate number of PCs to give as an argument to pcrelate. "],
["mixed-models.html", "9 Mixed models 9.1 Null model 9.2 Single-variant tests 9.3 Exercise", " 9 Mixed models These exercises introduce relatedness to association testing with mixed models. 9.1 Null model The first step in an association test is to fit the null model. In addition to the AnnotatedDataFrame with phenotypes we used previously, we will need the principal components and kinship. We will use the first five PCs to adjust for ancestry. # sample annotation repo_path &lt;- &quot;https://github.com/UW-GAC/SISG_2020/raw/master&quot; if (!dir.exists(&quot;data&quot;)) dir.create(&quot;data&quot;) sampfile &lt;- &quot;data/sample_phenotype_annotation.RData&quot; if (!file.exists(sampfile)) download.file(file.path(repo_path, sampfile), sampfile) annot &lt;- TopmedPipeline::getobj(sampfile) library(Biobase) head(pData(annot)) ## sample.id subject.id Population Population.Description sex status ## 1 HG00096 HG00096 GBR British in England and Scotland M 0 ## 2 HG00097 HG00097 GBR British in England and Scotland F 1 ## 3 HG00099 HG00099 GBR British in England and Scotland F 0 ## 4 HG00100 HG00100 GBR British in England and Scotland F 1 ## 5 HG00101 HG00101 GBR British in England and Scotland M 0 ## 6 HG00102 HG00102 GBR British in England and Scotland F 0 ## age height study ## 1 47 165.300 study_1 ## 2 47 144.780 study_3 ## 3 40 185.500 study_2 ## 4 45 150.622 study_3 ## 5 40 177.800 study_3 ## 6 49 169.100 study_1 # load the PCs pcfile &lt;- &quot;data/pcs.RData&quot; if (!file.exists(pcfile)) download.file(file.path(repo_path, pcfile), pcfile) pcs &lt;- TopmedPipeline::getobj(pcfile) pcs &lt;- pcs[,c(&quot;sample.id&quot;, &quot;PC1&quot;, &quot;PC2&quot;, &quot;PC3&quot;, &quot;PC4&quot;, &quot;PC5&quot;)] head(pcs) ## sample.id PC1 PC2 PC3 PC4 PC5 ## 1 HG00096 -0.02098435 -0.03716014 -0.007539234 -0.004984352 -0.03920777 ## 2 HG00097 -0.01929295 -0.03289496 -0.009176117 -0.005328914 -0.03297778 ## 3 HG00099 -0.02042444 -0.03371227 -0.010983795 -0.004856350 -0.03208595 ## 4 HG00100 -0.01970348 -0.03978044 -0.013302258 -0.004340841 -0.04208343 ## 5 HG00101 -0.01959563 -0.03431033 -0.008571074 -0.002220712 -0.03260015 ## 6 HG00102 -0.02041573 -0.03941142 -0.010696762 0.001506639 -0.02913023 # add PCs to the sample annotation dat &lt;- left_join(pData(annot), pcs, by=&quot;sample.id&quot;) pData(annot) &lt;- dat save(annot, file=&quot;data/sample_phenotype_pcs.RData&quot;) We create a kinship matrix from the output of pcrelate. We multiply the kinship values by 2 to get values equivalent to a GRM. This matrix is represented in R as a symmetric matrix object from the Matrix package. kinfile &lt;- &quot;data/pcrelate_kinship.RData&quot; if (!file.exists(kinfile)) download.file(file.path(repo_path, kinfile), kinfile) pcrel &lt;- TopmedPipeline::getobj(kinfile) library(GENESIS) kinship &lt;- pcrelateToMatrix(pcrel, scaleKin=2, verbose=FALSE) dim(kinship) ## [1] 100 100 kinship[1:5,1:5] ## 5 x 5 Matrix of class &quot;dsyMatrix&quot; ## HG00110 HG00116 HG00120 HG00128 HG00136 ## HG00110 1.046618916 0.01896886 -0.01635266 -0.006769183 -0.022907033 ## HG00116 0.018968859 0.92512545 0.19178400 0.013529261 -0.018774460 ## HG00120 -0.016352656 0.19178400 0.96012109 -0.014849711 -0.046482113 ## HG00128 -0.006769183 0.01352926 -0.01484971 0.914741469 -0.003540016 ## HG00136 -0.022907033 -0.01877446 -0.04648211 -0.003540016 1.007541773 We fit the null model, adding the PCs to the list of covariates, and specifying the kinship as the covariance matrix with the cov.mat argument. As before, we use study as a grouping variable. nullmod &lt;- fitNullModel(annot, outcome=&quot;height&quot;, covars=c(&quot;sex&quot;, &quot;age&quot;, &quot;study&quot;, paste0(&quot;PC&quot;, 1:5)), cov.mat=kinship, group.var=&quot;study&quot;, verbose=FALSE) save(nullmod, file=&quot;data/null_mixed_model.RData&quot;) 9.2 Single-variant tests Now we can run a single-variant test, accounting for relatedness between the subjects. library(SeqVarTools) gdsfile &lt;- &quot;data/1KG_phase3_subset_chr1.gds&quot; if (!file.exists(gdsfile)) download.file(file.path(repo_path, gdsfile), gdsfile) gdsfmt::showfile.gds(closeall=TRUE) # make sure file is not already open gds &lt;- seqOpen(gdsfile) seqData &lt;- SeqVarData(gds, sampleData=annot) iterator &lt;- SeqVarBlockIterator(seqData, verbose=FALSE) assoc &lt;- assocTestSingle(iterator, nullmod) ## # of selected samples: 100 head(assoc) ## variant.id chr pos allele.index n.obs freq MAC Score Score.SE ## 1 1 1 970546 1 100 0.015 3 -0.08539608 0.14196049 ## 2 2 1 985900 1 100 0.045 9 -0.22241847 0.23151042 ## 5 5 1 1472676 1 100 0.005 1 -0.08038066 0.08682407 ## 7 7 1 2185887 1 100 0.005 1 0.02490820 0.07345671 ## 9 9 1 2629401 1 100 0.025 5 0.16640336 0.18372179 ## 10 10 1 2710895 1 100 0.060 12 0.09145582 0.27222044 ## Score.Stat Score.pval Est Est.SE PVE ## 1 -0.6015483 0.5474749 -4.237435 7.044214 0.004020670 ## 2 -0.9607277 0.3366891 -4.149825 4.319460 0.010255530 ## 5 -0.9257877 0.3545563 -10.662800 11.517543 0.009523144 ## 7 0.3390868 0.7345443 4.616145 13.613460 0.001277554 ## 9 0.9057356 0.3650758 4.929930 5.443013 0.009115077 ## 10 0.3359624 0.7368992 1.234156 3.673493 0.001254119 qqPlot(assoc$Score.pval) 9.3 Exercise Run a sliding window test using the mixed model and make a QQ plot. "],
["mixed-models-solutions.html", "10 Mixed models - Solutions", " 10 Mixed models - Solutions Run a sliding window test using the mixed model and make a QQ plot. seqResetFilter(seqData, verbose=FALSE) iterator &lt;- SeqVarWindowIterator(seqData, windowSize=5000, windowShift=2000, verbose=FALSE) assoc &lt;- assocTestAggregate(iterator, nullmod, test=&quot;Burden&quot;, AF.max=0.1, weight.beta=c(1,1)) ## # of selected samples: 100 head(assoc$results) ## chr start end n.site n.alt n.sample.alt Score Score.SE ## 1 1 966001 971000 1 3 3 -0.08539608 0.14196049 ## 2 1 982001 987000 1 9 9 -0.22241847 0.23151042 ## 3 1 1022001 1027000 0 0 0 NA NA ## 4 1 1262001 1267000 0 0 0 NA NA ## 5 1 1468001 1473000 1 1 1 -0.08038066 0.08682407 ## 6 1 1732001 1737000 0 0 0 NA NA ## Score.Stat Score.pval Est Est.SE PVE ## 1 -0.6015483 0.5474749 -4.237435 7.044214 0.004020670 ## 2 -0.9607277 0.3366891 -4.149825 4.319460 0.010255530 ## 3 NA NA NA NA NA ## 4 NA NA NA NA NA ## 5 -0.9257877 0.3545563 -10.662800 11.517543 0.009523144 ## 6 NA NA NA NA NA head(assoc$variantInfo) ## [[1]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 1 1 970546 1 100 0.015 3 1 ## ## [[2]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 2 1 985900 1 100 0.045 9 1 ## ## [[3]] ## [1] variant.id chr pos allele.index n.obs ## [6] freq MAC weight ## &lt;0 rows&gt; (or 0-length row.names) ## ## [[4]] ## [1] variant.id chr pos allele.index n.obs ## [6] freq MAC weight ## &lt;0 rows&gt; (or 0-length row.names) ## ## [[5]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 5 1 1472676 1 100 0.005 1 1 ## ## [[6]] ## [1] variant.id chr pos allele.index n.obs ## [6] freq MAC weight ## &lt;0 rows&gt; (or 0-length row.names) qqPlot(assoc$results$Score.pval) seqClose(gds) "],
["variant-annotation.html", "11 Variant annotation 11.1 Using Bioconductor annotation resources 11.2 Aggregating and filtering variants using annotation", " 11 Variant annotation 11.1 Using Bioconductor annotation resources In this example, we illustrate defining aggregate units based on known genes. First, we load the null mixed model and open the GDS file. modfile &lt;- &quot;data/null_mixed_model.RData&quot; nullmod &lt;- TopmedPipeline::getobj(modfile) sampfile &lt;- &quot;data/sample_phenotype_annotation.RData&quot; annot &lt;- TopmedPipeline::getobj(sampfile) gdsfile &lt;- &quot;data/1KG_phase3_subset_chr1.gds&quot; library(SeqVarTools) gds &lt;- seqOpen(gdsfile) seqData &lt;- SeqVarData(gds, sampleData=annot) We use the human genome annotation from Bioconductor to identify genes. library(GenomicRanges) library(TxDb.Hsapiens.UCSC.hg19.knownGene) # return the variants in seqData as a GRanges object gr &lt;- granges(gds) gr ## GRanges object with 1120 ranges and 0 metadata columns: ## seqnames ranges strand ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; ## 1 1 970546 * ## 2 1 985900 * ## 3 1 1025045 * ## 4 1 1265550 * ## 5 1 1472676 * ## ... ... ... ... ## 1116 1 248715186 * ## 1117 1 248715606-248715610 * ## 1118 1 248761613 * ## 1119 1 248894546 * ## 1120 1 249149558 * ## ------- ## seqinfo: 1 sequence from an unspecified genome; no seqlengths # find variants that overlap with each gene txdb &lt;- TxDb.Hsapiens.UCSC.hg19.knownGene gr &lt;- renameSeqlevels(gr, paste0(&quot;chr&quot;, seqlevels(gr))) ts &lt;- transcriptsByOverlaps(txdb, gr, columns=&quot;GENEID&quot;) # simplistic example - define genes as overlapping transcripts genes &lt;- reduce(ts) genes &lt;- renameSeqlevels(genes, sub(&quot;chr&quot;, &quot;&quot;, seqlevels(genes))) genes ## GRanges object with 384 ranges and 0 metadata columns: ## seqnames ranges strand ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; ## [1] 1 955503-991499 + ## [2] 1 2160134-2241652 + ## [3] 1 2985742-3355185 + ## [4] 1 6484848-6521004 + ## [5] 1 6845384-7829766 + ## ... ... ... ... ## [380] 1 245912642-246670644 - ## [381] 1 246703863-246729565 - ## [382] 1 247108849-247242115 - ## [383] 1 247463622-247495045 - ## [384] 1 249144203-249153315 - ## ------- ## seqinfo: 93 sequences (1 circular) from hg19 genome We run a burden test, setting a maximum alternate allele frequency to exclude common variants. # create an iterator where each successive unit is a different gene iterator &lt;- SeqVarRangeIterator(seqData, variantRanges=genes, verbose=FALSE) # do a burden test on the rare variants in each gene assoc &lt;- assocTestAggregate(iterator, nullmod, AF.max=0.05, test=&quot;Burden&quot;) ## # of selected samples: 100 head(assoc$results) ## n.site n.alt n.sample.alt Score Score.SE Score.Stat Score.pval ## 1 2 12 12 -0.307814558 0.26357660 -1.1678372 0.24287243 ## 2 1 1 1 0.024908204 0.07345671 0.3390868 0.73454432 ## 3 1 2 2 0.200506079 0.11801693 1.6989604 0.08932665 ## 4 2 4 4 -0.005743665 0.16583076 -0.0346357 0.97237023 ## 5 1 8 8 0.029783393 0.21038637 0.1415652 0.88742344 ## 6 0 0 0 NA NA NA NA ## Est Est.SE PVE ## 1 -4.4307319 3.793964 1.515382e-02 ## 2 4.6161448 13.613460 1.277554e-03 ## 3 14.3959044 8.473361 3.207185e-02 ## 4 -0.2088617 6.030244 1.332924e-05 ## 5 0.6728821 4.753160 2.226746e-04 ## 6 NA NA NA head(assoc$variantInfo) ## [[1]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 1 1 970546 1 100 0.015 3 1 ## 2 2 1 985900 1 100 0.045 9 1 ## ## [[2]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 7 1 2185887 1 100 0.005 1 1 ## ## [[3]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 2 15 1 3293503 1 100 0.01 2 1 ## ## [[4]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 36 1 6489967 1 100 0.01 2 1 ## 2 37 1 6503405 1 100 0.01 2 1 ## ## [[5]] ## variant.id chr pos allele.index n.obs freq MAC weight ## 2 39 1 7056029 1 100 0.04 8 1 ## ## [[6]] ## [1] variant.id chr pos allele.index n.obs ## [6] freq MAC weight ## &lt;0 rows&gt; (or 0-length row.names) 11.2 Aggregating and filtering variants using annotation Alternatively, we may want to import annotation from other software, such as ANNOVAR or WGSA. The output formats of variant annotation software can be quite complex, but for this exercise we use fairly simple tab-separated text files. library(dplyr) snv_annotation &lt;- read.table(&quot;data/snv_parsed.tsv&quot;, sep=&quot;\\t&quot;, na.strings=&quot;.&quot;, header=TRUE, as.is=TRUE) indel_annotation &lt;- read.table(&quot;data/indel_parsed.tsv&quot;, sep=&quot;\\t&quot;, na.strings=&quot;.&quot;, header=TRUE, as.is=TRUE) combined_annotation &lt;- bind_rows(snv_annotation, indel_annotation) Here we remove variants that are not associated with a gene, group the variants by gene, and filter the variants for intron_variants with a CADD_phred score greater than 3 in just a few lines of code: combined_annotation %&gt;% filter(VEP_ensembl_Gene_ID != &quot;.&quot;) %&gt;% # remove variants not annotated with a Gene_ID group_by(VEP_ensembl_Gene_ID) %&gt;% # aggregate by gene filter(CADD_phred &gt; 3) %&gt;% # filter variants to keep only CADD_phred greater than 3 filter(stringr::str_detect(VEP_ensembl_Consequence, &quot;intron_variant&quot;)) %&gt;% # keep intron variants glimpse() # view the result - 592 variants ## Rows: 592 ## Columns: 7 ## Groups: VEP_ensembl_Gene_ID [170] ## $ CHROM &lt;int&gt; 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 2… ## $ POS &lt;int&gt; 15699830, 15699830, 16437047, 16445862, 16813… ## $ REF &lt;chr&gt; &quot;G&quot;, &quot;G&quot;, &quot;G&quot;, &quot;C&quot;, &quot;C&quot;, &quot;G&quot;, &quot;G&quot;, &quot;G&quot;, &quot;G&quot;, … ## $ ALT &lt;chr&gt; &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;T&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, … ## $ VEP_ensembl_Gene_ID &lt;chr&gt; &quot;ENSG00000198062&quot;, &quot;ENSG00000198062&quot;, &quot;ENSG00… ## $ VEP_ensembl_Consequence &lt;chr&gt; &quot;intron_variant,NMD_transcript_variant&quot;, &quot;int… ## $ CADD_phred &lt;dbl&gt; 3.612, 3.612, 9.729, 3.895, 7.530, 5.332, 5.3… Now that you’ve got a set of variants that you can aggregate into genic units, the data needs to be reformatted for input to the GENESIS analysis pipeline. The input to the GENESIS pipeline is a data frame with variables called group_id, chr, pos, ref, and alt. Prepare this data frame and save it for testing (You do not need to filter the variants for this exercise): aggregates &lt;- combined_annotation %&gt;% filter(VEP_ensembl_Gene_ID != &quot;.&quot;) %&gt;% # remove variants not annotated with a Gene_ID group_by(VEP_ensembl_Gene_ID) %&gt;% # aggregate by gene dplyr::select(group_id = VEP_ensembl_Gene_ID, chr = CHROM, pos = POS, ref = REF, alt = ALT) %&gt;% glimpse # inspect the tibble ## Rows: 2,603 ## Columns: 5 ## Groups: group_id [598] ## $ group_id &lt;chr&gt; &quot;ENSG00000230643&quot;, &quot;ENSG00000226474&quot;, &quot;ENSG00000231565&quot;, &quot;EN… ## $ chr &lt;int&gt; 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, … ## $ pos &lt;int&gt; 15589963, 15613723, 15613723, 15628559, 15699830, 15699830, … ## $ ref &lt;chr&gt; &quot;G&quot;, &quot;A&quot;, &quot;A&quot;, &quot;C&quot;, &quot;G&quot;, &quot;G&quot;, &quot;G&quot;, &quot;G&quot;, &quot;G&quot;, &quot;G&quot;, &quot;G&quot;, &quot;G&quot;, … ## $ alt &lt;chr&gt; &quot;T&quot;, &quot;G&quot;, &quot;G&quot;, &quot;T&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;T&quot;, &quot;T&quot;, &quot;T&quot;, &quot;T&quot;, … You can also compute some summary information about these aggregates, such as counting how many genic units we’re using: length(unique(aggregates$group_id)) ## [1] 598 We can look at the distribution of the number of variants per aggregation unit: counts &lt;- aggregates %&gt;% group_by(group_id) %&gt;% summarize(n = n()) ggplot(counts, aes(x = n)) + geom_bar() "],
["aggregate-tests.html", "12 Aggregate tests 12.1 Aggregate unit for association testing exercise 12.2 Association testing with aggregate units 12.3 Exercise", " 12 Aggregate tests 12.1 Aggregate unit for association testing exercise Now you can proceed to an assocation testing exercise. You will be using a slightly different gene-based aggregation unit for the assocation testing exercise. In this exercise, the genic units include SNP variants from all chromosomes (no indels, and not just chromosome 22 as before), each genic unit is expanded to include the set of SNPs falling within a GENCODE-defined gene along with 20 kb flanking regions upstream and downstream of that range, and the positions are in genome build hg19 (so that the annotation positions are consistent with the build used for genotyping data in the workshop). This set of aggregation units is not filtered by CADD score or consequence. As before, the aggregation units are defined in an R dataframe. Each row of the dataframe specifies a variant (chr, pos, ref, alt) and the group identifier (group_id) it is a part of. Mutiple rows with different group identifiers can be specified to assign a variant to different groups (a variant can be assigned to mutiple genes). Begin by loading the aggregation units using TopmedPipeline::getobj(): library(dplyr) repo_path &lt;- &quot;https://github.com/UW-GAC/SISG_2020/raw/master&quot; if (!dir.exists(&quot;data&quot;)) dir.create(&quot;data&quot;) aggfile &lt;- &quot;data/variants_by_gene.RData&quot; if (!file.exists(aggfile)) download.file(file.path(repo_path, aggfile), aggfile) aggunit &lt;- TopmedPipeline::getobj(aggfile) names(aggunit) ## [1] &quot;group_id&quot; &quot;chr&quot; &quot;pos&quot; &quot;ref&quot; &quot;alt&quot; head(aggunit) ## # A tibble: 6 x 5 ## group_id chr pos ref alt ## &lt;chr&gt; &lt;fct&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 ENSG00000131591.13 1 1025045 C T ## 2 ENSG00000169962.4 1 1265550 C T ## 3 ENSG00000205090.4 1 1472676 T C ## 4 ENSG00000171603.12 1 9788518 G A ## 5 ENSG00000204624.6 1 11593461 C T ## 6 ENSG00000270914.1 1 12068870 G A # an example of variant that is present in mutiple groups mult &lt;- aggunit %&gt;% group_by(chr, pos) %&gt;% summarise(n=n()) %&gt;% filter(n &gt; 1) inner_join(aggunit, mult[2,1:2]) ## # A tibble: 2 x 5 ## group_id chr pos ref alt ## &lt;chr&gt; &lt;fct&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 ENSG00000187952.8 1 21742183 G A ## 2 ENSG00000227001.2 1 21742183 G A 12.2 Association testing with aggregate units We can run a burden test or SKAT on each of these units using assocTestAggregate. We define a SeqVarListIterator object where each list element is an aggregate unit. The constructor expects a GRangesList, so we use the TopmedPipeline function aggregateGRangesList to quickly convert our single dataframe to the required format. This function can account for multiallelic variants (the same chromosome, position, and ref, but different alt alleles). library(TopmedPipeline) library(SeqVarTools) library(GENESIS) gdsfile &lt;- &quot;data/1KG_phase3_subset_chr1.gds&quot; if (!file.exists(gdsfile)) download.file(file.path(repo_path, gdsfile), gdsfile) gdsfmt::showfile.gds(closeall=TRUE) # make sure file is not already open ## FileName ## 1 /Users/stephanie/SISG/SISG_2020/SISG_2020/data/1KG_phase3_subset_chr1.gds ## ReadOnly State ## 1 TRUE closed gds &lt;- seqOpen(gdsfile) annotfile &lt;- &quot;data/sample_phenotype_pcs.RData&quot; if (!file.exists(annotfile)) download.file(file.path(repo_path, annotfile), aggfile) annot &lt;- getobj(annotfile) seqData &lt;- SeqVarData(gds, sampleData=annot) # subset to chromosome 1 aggunit1 &lt;- filter(aggunit, chr == 1) aggVarList &lt;- aggregateGRangesList(aggunit1) length(aggVarList) ## [1] 127 head(names(aggVarList)) ## [1] &quot;ENSG00000131591.13&quot; &quot;ENSG00000169962.4&quot; &quot;ENSG00000205090.4&quot; ## [4] &quot;ENSG00000171603.12&quot; &quot;ENSG00000204624.6&quot; &quot;ENSG00000270914.1&quot; aggVarList[[1]] ## GRanges object with 1 range and 2 metadata columns: ## seqnames ranges strand | ref alt ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; | &lt;character&gt; &lt;character&gt; ## [1] 1 1025045 * | C T ## ------- ## seqinfo: 23 sequences from an unspecified genome; no seqlengths iterator &lt;- SeqVarListIterator(seqData, variantRanges=aggVarList, verbose=FALSE) As in the previous section, we must load the null model before running the association test. if (!exists(&quot;nullmod&quot;)) { nmfile &lt;- &quot;data/null_mixed_model.RData&quot; if (!file.exists(nmfile)) download.file(file.path(repo_path, nmfile), nmfile) nullmod &lt;- getobj(nmfile) } assoc &lt;- assocTestAggregate(iterator, nullmod, test=&quot;Burden&quot;, AF.max=0.1, weight.beta=c(1,1)) ## # of selected samples: 100 names(assoc) ## [1] &quot;results&quot; &quot;variantInfo&quot; head(assoc$results) ## n.site n.alt n.sample.alt Score Score.SE Score.Stat ## ENSG00000131591.13 0 0 0 NA NA NA ## ENSG00000169962.4 0 0 0 NA NA NA ## ENSG00000205090.4 1 1 1 -0.08038066 0.08682407 -0.9257877 ## ENSG00000171603.12 0 0 0 NA NA NA ## ENSG00000204624.6 0 0 0 NA NA NA ## ENSG00000270914.1 1 1 1 -0.05287454 0.08051536 -0.6567013 ## Score.pval Est Est.SE PVE ## ENSG00000131591.13 NA NA NA NA ## ENSG00000169962.4 NA NA NA NA ## ENSG00000205090.4 0.3545563 -10.662800 11.51754 0.009523144 ## ENSG00000171603.12 NA NA NA NA ## ENSG00000204624.6 NA NA NA NA ## ENSG00000270914.1 0.5113730 -8.156224 12.41999 0.004791740 head(names(assoc$variantInfo)) ## [1] &quot;ENSG00000131591.13&quot; &quot;ENSG00000169962.4&quot; &quot;ENSG00000205090.4&quot; ## [4] &quot;ENSG00000171603.12&quot; &quot;ENSG00000204624.6&quot; &quot;ENSG00000270914.1&quot; assoc$variantInfo[[3]] ## variant.id chr pos ref alt allele.index n.obs freq MAC weight ## 1 5 1 1472676 T C 1 100 0.005 1 1 qqPlot(assoc$results$Score.pval) 12.3 Exercise Since we are working with a subset of the data, many of the genes listed in group_id have a very small number of variants. Create a new set of units based on position rather than gene name, using the TopmedPipeline function aggregateGRanges. Then run SKAT using those units and a SeqVarRangeIterator. "],
["annotation-solutions.html", "13 Annotation - Solutions", " 13 Annotation - Solutions Since we are working with a subset of the data, many of the genes listed in group_id have a very small number of variants. Create a new set of units based on position rather than gene name, using the TopmedPipeline function aggregateGRanges. Then run SKAT using those units and a SeqVarRangeIterator. minp &lt;- min(aggunit1$pos) maxp &lt;- max(aggunit1$pos) aggByPos &lt;- data.frame(chr=1, start=seq(minp, maxp-1e6, length.out=10), end=seq(minp+1e6, maxp, length.out=10)) aggByPos$group_id &lt;- 1:nrow(aggByPos) head(aggByPos) ## chr start end group_id ## 1 1 1025045 2025045 1 ## 2 1 28440219 29440219 2 ## 3 1 55855393 56855393 3 ## 4 1 83270568 84270568 4 ## 5 1 110685742 111685742 5 ## 6 1 138100916 139100916 6 aggVarList &lt;- aggregateGRanges(aggByPos) aggVarList ## GRanges object with 10 ranges and 0 metadata columns: ## seqnames ranges strand ## &lt;Rle&gt; &lt;IRanges&gt; &lt;Rle&gt; ## 1 1 1025045-2025045 * ## 2 1 28440219-29440219 * ## 3 1 55855393-56855393 * ## 4 1 83270567-84270567 * ## 5 1 110685741-111685741 * ## 6 1 138100916-139100916 * ## 7 1 165516090-166516090 * ## 8 1 192931264-193931264 * ## 9 1 220346438-221346438 * ## 10 1 247761613-248761613 * ## ------- ## seqinfo: 1 sequence from an unspecified genome; no seqlengths seqResetFilter(seqData, verbose=FALSE) iterator &lt;- SeqVarRangeIterator(seqData, variantRanges=aggVarList, verbose=FALSE) assoc &lt;- assocTestAggregate(iterator, nullmod, test=&quot;SKAT&quot;, AF.max=0.1, weight.beta=c(1,25)) ## # of selected samples: 100 head(assoc$results) ## n.site n.alt n.sample.alt Q pval err pval.method ## 1 1 1 1 3.1746150 0.3545563 0 integration ## 2 3 11 10 4.0727682 0.8022399 0 saddlepoint ## 3 1 5 5 1.6067904 0.5884993 0 integration ## 4 2 3 3 0.8777963 0.8930198 0 saddlepoint ## 5 0 0 0 NA NA NA &lt;NA&gt; ## 6 0 0 0 NA NA NA &lt;NA&gt; head(assoc$variantInfo) ## $`1` ## variant.id chr pos allele.index n.obs freq MAC weight ## 3 5 1 1472676 1 100 0.005 1 22.16634 ## ## $`2` ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 152 1 28527425 1 100 0.010 2 19.641954 ## 3 154 1 28844055 1 100 0.005 1 22.166338 ## 4 155 1 29149880 1 100 0.040 8 9.385331 ## ## $`3` ## variant.id chr pos allele.index n.obs freq MAC weight ## 1 273 1 56084960 1 100 0.025 5 13.61604 ## ## $`4` ## variant.id chr pos allele.index n.obs freq MAC weight ## 3 424 1 83792600 1 100 0.010 2 19.64195 ## 5 426 1 84152287 1 100 0.005 1 22.16634 ## ## $`5` ## [1] variant.id chr pos n.obs freq MAC weight ## &lt;0 rows&gt; (or 0-length row.names) ## ## $`6` ## [1] variant.id chr pos n.obs freq MAC weight ## &lt;0 rows&gt; (or 0-length row.names) seqClose(gds) "],
["exercises-running-a-gwas-workflow.html", "14 Exercises: Running a GWAS workflow 14.1 VCF to GDS 14.2 Null Model 14.3 Single variant test 14.4 Analysis follow-up", " 14 Exercises: Running a GWAS workflow On the BioData Catalyst platform, locate these GENESIS public apps and copy them to your project: 1. GENESIS VCF to GDS 2. GENESIS Null Model 3. GENESIS Single Variant association testing 14.1 VCF to GDS Run the VCF to GDS workflow to convert the 1000 Genomes VCF files to GDS files. Use the “view stats and logs” button to check on the status of your tasks. 14.2 Null Model Run a null model using “outcome” as the outcome variable and adjust for the first two PCs. Select a PCA file, a phenotype file, and a relatedness matrix file from the files available in the GENESIS tutorial project. Review the null model reports generated as html files. 14.3 Single variant test Use the GDS files and null model file you created in the previous steps to run a single variant association test. Use the phenotype file generated by the Null Model workflow as the phenotype file input. Review the QQ and manhattan plots. 14.4 Analysis follow-up In RStudio, locate the results of your association test under /sbgenomics/project-files/. Load one of these results files into R and explore it. "]
]
